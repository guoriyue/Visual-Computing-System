  %597 = cast(%596, dtype="int8") /* ty=Tensor[(1, 1024, 14, 14), int8] */;
  %598 = nn.conv2d(%597, meta[relay.Constant][86] /* ty=Tensor[(256, 1024, 1, 1), int8] */, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1], out_dtype="int16") /* ty=Tensor[(1, 256, 14, 14), int16] */;
  %599 = add(%598, 256i16 /* ty=int16 */) /* ty=Tensor[(1, 256, 14, 14), int16] */;
  %600 = right_shift(%599, 9i16 /* ty=int16 */) /* ty=Tensor[(1, 256, 14, 14), int16] */;
  %601 = clip(%600, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 256, 14, 14), int16] */;
  %602 = cast(%601, dtype="int8") /* ty=Tensor[(1, 256, 14, 14), int8] */;
  %603 = annotation.stop_fusion(%602) /* ty=Tensor[(1, 256, 14, 14), int8] */;
  %604 = cast(%603, dtype="float32") /* ty=Tensor[(1, 256, 14, 14), float32] */;
  %605 = multiply(%604, 0.125f /* ty=float32 */) /* ty=Tensor[(1, 256, 14, 14), float32] */;
  %606 = nn.bias_add(%605, meta[relay.Constant][87] /* ty=Tensor[(256), float32] */) /* ty=Tensor[(1, 256, 14, 14), float32] span=aten::_convolution_43:0:0 */;
  %607 = nn.relu(%606) /* ty=Tensor[(1, 256, 14, 14), float32] span=aten::relu__40:0:0 */;
  %608 = multiply(%607, 8f /* ty=float32 */) /* ty=Tensor[(1, 256, 14, 14), float32] */;
  %609 = round(%608) /* ty=Tensor[(1, 256, 14, 14), float32] */;
  %610 = clip(%609, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 256, 14, 14), float32] */;
  %611 = cast(%610, dtype="int8") /* ty=Tensor[(1, 256, 14, 14), int8] */;
  %612 = nn.conv2d(%611, meta[relay.Constant][88] /* ty=Tensor[(256, 256, 3, 3), int8] */, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3], out_dtype="int16") /* ty=Tensor[(1, 256, 14, 14), int16] */;
  %613 = add(%612, 128i16 /* ty=int16 */) /* ty=Tensor[(1, 256, 14, 14), int16] */;
  %614 = right_shift(%613, 8i16 /* ty=int16 */) /* ty=Tensor[(1, 256, 14, 14), int16] */;
  %615 = clip(%614, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 256, 14, 14), int16] */;
  %616 = cast(%615, dtype="int8") /* ty=Tensor[(1, 256, 14, 14), int8] */;
  %617 = annotation.stop_fusion(%616) /* ty=Tensor[(1, 256, 14, 14), int8] */;
  %618 = cast(%617, dtype="float32") /* ty=Tensor[(1, 256, 14, 14), float32] */;
  %619 = multiply(%618, 0.125f /* ty=float32 */) /* ty=Tensor[(1, 256, 14, 14), float32] */;
  %620 = nn.bias_add(%619, meta[relay.Constant][89] /* ty=Tensor[(256), float32] */) /* ty=Tensor[(1, 256, 14, 14), float32] span=aten::_convolution_44:0:0 */;
  %621 = nn.relu(%620) /* ty=Tensor[(1, 256, 14, 14), float32] span=aten::relu__41:0:0 */;
  %622 = multiply(%621, 8f /* ty=float32 */) /* ty=Tensor[(1, 256, 14, 14), float32] */;
  %623 = round(%622) /* ty=Tensor[(1, 256, 14, 14), float32] */;
  %624 = clip(%623, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 256, 14, 14), float32] */;
  %625 = cast(%624, dtype="int8") /* ty=Tensor[(1, 256, 14, 14), int8] */;
  %626 = nn.conv2d(%625, meta[relay.Constant][90] /* ty=Tensor[(1024, 256, 1, 1), int8] */, padding=[0, 0, 0, 0], channels=1024, kernel_size=[1, 1], out_dtype="int16") /* ty=Tensor[(1, 1024, 14, 14), int16] */;
  %627 = add(%626, 32i16 /* ty=int16 */) /* ty=Tensor[(1, 1024, 14, 14), int16] */;
  %628 = right_shift(%627, 6i16 /* ty=int16 */) /* ty=Tensor[(1, 1024, 14, 14), int16] */;
  %629 = clip(%628, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 1024, 14, 14), int16] */;
  %630 = cast(%629, dtype="int8") /* ty=Tensor[(1, 1024, 14, 14), int8] */;
  %631 = annotation.stop_fusion(%630) /* ty=Tensor[(1, 1024, 14, 14), int8] */;
  %632 = cast(%631, dtype="float32") /* ty=Tensor[(1, 1024, 14, 14), float32] */;
  %633 = multiply(%632, 0.125f /* ty=float32 */) /* ty=Tensor[(1, 1024, 14, 14), float32] */;
  %634 = nn.bias_add(%633, meta[relay.Constant][91] /* ty=Tensor[(1024), float32] */) /* ty=Tensor[(1, 1024, 14, 14), float32] span=aten::_convolution_45:0:0 */;
  %635 = add(%634, %593) /* ty=Tensor[(1, 1024, 14, 14), float32] span=aten::add__13:0:0 */;
  %636 = nn.relu(%635) /* ty=Tensor[(1, 1024, 14, 14), float32] span=aten::relu__42:0:0 */;
  %637 = multiply(%636, 8f /* ty=float32 */) /* ty=Tensor[(1, 1024, 14, 14), float32] */;
  %638 = round(%637) /* ty=Tensor[(1, 1024, 14, 14), float32] */;
  %639 = clip(%638, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 1024, 14, 14), float32] */;
  %640 = cast(%639, dtype="int8") /* ty=Tensor[(1, 1024, 14, 14), int8] */;
  %641 = nn.conv2d(%640, meta[relay.Constant][92] /* ty=Tensor[(256, 1024, 1, 1), int8] */, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1], out_dtype="int16") /* ty=Tensor[(1, 256, 14, 14), int16] */;
  %642 = add(%641, 128i16 /* ty=int16 */) /* ty=Tensor[(1, 256, 14, 14), int16] */;
  %643 = right_shift(%642, 8i16 /* ty=int16 */) /* ty=Tensor[(1, 256, 14, 14), int16] */;
  %644 = clip(%643, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 256, 14, 14), int16] */;
  %645 = cast(%644, dtype="int8") /* ty=Tensor[(1, 256, 14, 14), int8] */;
  %646 = annotation.stop_fusion(%645) /* ty=Tensor[(1, 256, 14, 14), int8] */;
  %647 = cast(%646, dtype="float32") /* ty=Tensor[(1, 256, 14, 14), float32] */;
  %648 = multiply(%647, 0.125f /* ty=float32 */) /* ty=Tensor[(1, 256, 14, 14), float32] */;
  %649 = nn.bias_add(%648, meta[relay.Constant][93] /* ty=Tensor[(256), float32] */) /* ty=Tensor[(1, 256, 14, 14), float32] span=aten::_convolution_46:0:0 */;
  %650 = nn.relu(%649) /* ty=Tensor[(1, 256, 14, 14), float32] span=aten::relu__43:0:0 */;
  %651 = multiply(%650, 8f /* ty=float32 */) /* ty=Tensor[(1, 256, 14, 14), float32] */;
  %652 = round(%651) /* ty=Tensor[(1, 256, 14, 14), float32] */;
  %653 = clip(%652, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 256, 14, 14), float32] */;
  %654 = cast(%653, dtype="int8") /* ty=Tensor[(1, 256, 14, 14), int8] */;
  %655 = nn.conv2d(%654, meta[relay.Constant][94] /* ty=Tensor[(256, 256, 3, 3), int8] */, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3], out_dtype="int16") /* ty=Tensor[(1, 256, 14, 14), int16] */;
  %656 = add(%655, 64i16 /* ty=int16 */) /* ty=Tensor[(1, 256, 14, 14), int16] */;
  %657 = right_shift(%656, 7i16 /* ty=int16 */) /* ty=Tensor[(1, 256, 14, 14), int16] */;
  %658 = clip(%657, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 256, 14, 14), int16] */;
  %659 = cast(%658, dtype="int8") /* ty=Tensor[(1, 256, 14, 14), int8] */;
  %660 = annotation.stop_fusion(%659) /* ty=Tensor[(1, 256, 14, 14), int8] */;
  %661 = cast(%660, dtype="float32") /* ty=Tensor[(1, 256, 14, 14), float32] */;
  %662 = multiply(%661, 0.125f /* ty=float32 */) /* ty=Tensor[(1, 256, 14, 14), float32] */;
  %663 = nn.bias_add(%662, meta[relay.Constant][95] /* ty=Tensor[(256), float32] */) /* ty=Tensor[(1, 256, 14, 14), float32] span=aten::_convolution_47:0:0 */;
  %664 = nn.relu(%663) /* ty=Tensor[(1, 256, 14, 14), float32] span=aten::relu__44:0:0 */;
  %665 = multiply(%664, 8f /* ty=float32 */) /* ty=Tensor[(1, 256, 14, 14), float32] */;
  %666 = round(%665) /* ty=Tensor[(1, 256, 14, 14), float32] */;
  %667 = clip(%666, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 256, 14, 14), float32] */;
  %668 = cast(%667, dtype="int8") /* ty=Tensor[(1, 256, 14, 14), int8] */;
  %669 = nn.conv2d(%668, meta[relay.Constant][96] /* ty=Tensor[(1024, 256, 1, 1), int8] */, padding=[0, 0, 0, 0], channels=1024, kernel_size=[1, 1], out_dtype="int16") /* ty=Tensor[(1, 1024, 14, 14), int16] */;
  %670 = add(%669, 32i16 /* ty=int16 */) /* ty=Tensor[(1, 1024, 14, 14), int16] */;
  %671 = right_shift(%670, 6i16 /* ty=int16 */) /* ty=Tensor[(1, 1024, 14, 14), int16] */;
  %672 = clip(%671, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 1024, 14, 14), int16] */;
  %673 = cast(%672, dtype="int8") /* ty=Tensor[(1, 1024, 14, 14), int8] */;
  %674 = annotation.stop_fusion(%673) /* ty=Tensor[(1, 1024, 14, 14), int8] */;
  %675 = cast(%674, dtype="float32") /* ty=Tensor[(1, 1024, 14, 14), float32] */;
  %676 = multiply(%675, 0.125f /* ty=float32 */) /* ty=Tensor[(1, 1024, 14, 14), float32] */;
  %677 = nn.bias_add(%676, meta[relay.Constant][97] /* ty=Tensor[(1024), float32] */) /* ty=Tensor[(1, 1024, 14, 14), float32] span=aten::_convolution_48:0:0 */;
  %678 = add(%677, %636) /* ty=Tensor[(1, 1024, 14, 14), float32] span=aten::add__14:0:0 */;
  %679 = nn.relu(%678) /* ty=Tensor[(1, 1024, 14, 14), float32] span=aten::relu__45:0:0 */;
  %680 = multiply(%679, 8f /* ty=float32 */) /* ty=Tensor[(1, 1024, 14, 14), float32] */;
  %681 = round(%680) /* ty=Tensor[(1, 1024, 14, 14), float32] */;
  %682 = clip(%681, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 1024, 14, 14), float32] */;
  %683 = cast(%682, dtype="int8") /* ty=Tensor[(1, 1024, 14, 14), int8] */;
  %684 = nn.conv2d(%683, meta[relay.Constant][98] /* ty=Tensor[(256, 1024, 1, 1), int8] */, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1], out_dtype="int16") /* ty=Tensor[(1, 256, 14, 14), int16] */;
  %685 = add(%684, 256i16 /* ty=int16 */) /* ty=Tensor[(1, 256, 14, 14), int16] */;
  %686 = right_shift(%685, 9i16 /* ty=int16 */) /* ty=Tensor[(1, 256, 14, 14), int16] */;
  %687 = clip(%686, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 256, 14, 14), int16] */;
  %688 = cast(%687, dtype="int8") /* ty=Tensor[(1, 256, 14, 14), int8] */;
  %689 = annotation.stop_fusion(%688) /* ty=Tensor[(1, 256, 14, 14), int8] */;
  %690 = cast(%689, dtype="float32") /* ty=Tensor[(1, 256, 14, 14), float32] */;
  %691 = multiply(%690, 0.125f /* ty=float32 */) /* ty=Tensor[(1, 256, 14, 14), float32] */;
  %692 = nn.bias_add(%691, meta[relay.Constant][99] /* ty=Tensor[(256), float32] */) /* ty=Tensor[(1, 256, 14, 14), float32] span=aten::_convolution_49:0:0 */;
  %693 = nn.relu(%692) /* ty=Tensor[(1, 256, 14, 14), float32] span=aten::relu__46:0:0 */;
  %694 = multiply(%693, 8f /* ty=float32 */) /* ty=Tensor[(1, 256, 14, 14), float32] */;
  %695 = round(%694) /* ty=Tensor[(1, 256, 14, 14), float32] */;
  %696 = clip(%695, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 256, 14, 14), float32] */;
  %697 = cast(%696, dtype="int8") /* ty=Tensor[(1, 256, 14, 14), int8] */;
  %698 = nn.conv2d(%697, meta[relay.Constant][100] /* ty=Tensor[(256, 256, 3, 3), int8] */, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3], out_dtype="int16") /* ty=Tensor[(1, 256, 14, 14), int16] */;
  %699 = add(%698, 64i16 /* ty=int16 */) /* ty=Tensor[(1, 256, 14, 14), int16] */;
  %700 = right_shift(%699, 7i16 /* ty=int16 */) /* ty=Tensor[(1, 256, 14, 14), int16] */;
  %701 = clip(%700, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 256, 14, 14), int16] */;
  %702 = cast(%701, dtype="int8") /* ty=Tensor[(1, 256, 14, 14), int8] */;
  %703 = annotation.stop_fusion(%702) /* ty=Tensor[(1, 256, 14, 14), int8] */;
  %704 = cast(%703, dtype="float32") /* ty=Tensor[(1, 256, 14, 14), float32] */;
  %705 = multiply(%704, 0.125f /* ty=float32 */) /* ty=Tensor[(1, 256, 14, 14), float32] */;
  %706 = nn.bias_add(%705, meta[relay.Constant][101] /* ty=Tensor[(256), float32] */) /* ty=Tensor[(1, 256, 14, 14), float32] span=aten::_convolution_50:0:0 */;
  %707 = nn.relu(%706) /* ty=Tensor[(1, 256, 14, 14), float32] span=aten::relu__47:0:0 */;
  %708 = multiply(%707, 8f /* ty=float32 */) /* ty=Tensor[(1, 256, 14, 14), float32] */;
  %709 = round(%708) /* ty=Tensor[(1, 256, 14, 14), float32] */;
  %710 = clip(%709, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 256, 14, 14), float32] */;
  %711 = cast(%710, dtype="int8") /* ty=Tensor[(1, 256, 14, 14), int8] */;
  %712 = nn.conv2d(%711, meta[relay.Constant][102] /* ty=Tensor[(1024, 256, 1, 1), int8] */, padding=[0, 0, 0, 0], channels=1024, kernel_size=[1, 1], out_dtype="int16") /* ty=Tensor[(1, 1024, 14, 14), int16] */;
  %713 = add(%712, 32i16 /* ty=int16 */) /* ty=Tensor[(1, 1024, 14, 14), int16] */;
  %714 = right_shift(%713, 6i16 /* ty=int16 */) /* ty=Tensor[(1, 1024, 14, 14), int16] */;
  %715 = clip(%714, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 1024, 14, 14), int16] */;
  %716 = cast(%715, dtype="int8") /* ty=Tensor[(1, 1024, 14, 14), int8] */;
  %717 = annotation.stop_fusion(%716) /* ty=Tensor[(1, 1024, 14, 14), int8] */;
  %718 = cast(%717, dtype="float32") /* ty=Tensor[(1, 1024, 14, 14), float32] */;
  %719 = multiply(%718, 0.125f /* ty=float32 */) /* ty=Tensor[(1, 1024, 14, 14), float32] */;
  %720 = nn.bias_add(%719, meta[relay.Constant][103] /* ty=Tensor[(1024), float32] */) /* ty=Tensor[(1, 1024, 14, 14), float32] span=aten::_convolution_51:0:0 */;
  %721 = add(%720, %679) /* ty=Tensor[(1, 1024, 14, 14), float32] span=aten::add__15:0:0 */;
  %722 = nn.relu(%721) /* ty=Tensor[(1, 1024, 14, 14), float32] span=aten::relu__48:0:0 */;
  %723 = multiply(%722, 8f /* ty=float32 */) /* ty=Tensor[(1, 1024, 14, 14), float32] */;
  %724 = round(%723) /* ty=Tensor[(1, 1024, 14, 14), float32] */;
  %725 = clip(%724, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 1024, 14, 14), float32] */;
  %726 = cast(%725, dtype="int8") /* ty=Tensor[(1, 1024, 14, 14), int8] */;
  %727 = nn.conv2d(%726, meta[relay.Constant][104] /* ty=Tensor[(256, 1024, 1, 1), int8] */, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1], out_dtype="int16") /* ty=Tensor[(1, 256, 14, 14), int16] */;
  %728 = add(%727, 256i16 /* ty=int16 */) /* ty=Tensor[(1, 256, 14, 14), int16] */;
  %729 = right_shift(%728, 9i16 /* ty=int16 */) /* ty=Tensor[(1, 256, 14, 14), int16] */;
  %730 = clip(%729, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 256, 14, 14), int16] */;
  %731 = cast(%730, dtype="int8") /* ty=Tensor[(1, 256, 14, 14), int8] */;
  %732 = annotation.stop_fusion(%731) /* ty=Tensor[(1, 256, 14, 14), int8] */;
  %733 = cast(%732, dtype="float32") /* ty=Tensor[(1, 256, 14, 14), float32] */;
  %734 = multiply(%733, 0.125f /* ty=float32 */) /* ty=Tensor[(1, 256, 14, 14), float32] */;
  %735 = nn.bias_add(%734, meta[relay.Constant][105] /* ty=Tensor[(256), float32] */) /* ty=Tensor[(1, 256, 14, 14), float32] span=aten::_convolution_52:0:0 */;
  %736 = nn.relu(%735) /* ty=Tensor[(1, 256, 14, 14), float32] span=aten::relu__49:0:0 */;
  %737 = multiply(%736, 8f /* ty=float32 */) /* ty=Tensor[(1, 256, 14, 14), float32] */;
  %738 = round(%737) /* ty=Tensor[(1, 256, 14, 14), float32] */;
  %739 = clip(%738, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 256, 14, 14), float32] */;
  %740 = cast(%739, dtype="int8") /* ty=Tensor[(1, 256, 14, 14), int8] */;
  %741 = nn.conv2d(%740, meta[relay.Constant][106] /* ty=Tensor[(256, 256, 3, 3), int8] */, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3], out_dtype="int16") /* ty=Tensor[(1, 256, 14, 14), int16] */;
  %742 = add(%741, 64i16 /* ty=int16 */) /* ty=Tensor[(1, 256, 14, 14), int16] */;
  %743 = right_shift(%742, 7i16 /* ty=int16 */) /* ty=Tensor[(1, 256, 14, 14), int16] */;
  %744 = clip(%743, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 256, 14, 14), int16] */;
  %745 = cast(%744, dtype="int8") /* ty=Tensor[(1, 256, 14, 14), int8] */;
  %746 = annotation.stop_fusion(%745) /* ty=Tensor[(1, 256, 14, 14), int8] */;
  %747 = cast(%746, dtype="float32") /* ty=Tensor[(1, 256, 14, 14), float32] */;
  %748 = multiply(%747, 0.125f /* ty=float32 */) /* ty=Tensor[(1, 256, 14, 14), float32] */;
  %749 = nn.bias_add(%748, meta[relay.Constant][107] /* ty=Tensor[(256), float32] */) /* ty=Tensor[(1, 256, 14, 14), float32] span=aten::_convolution_53:0:0 */;
  %750 = nn.relu(%749) /* ty=Tensor[(1, 256, 14, 14), float32] span=aten::relu__50:0:0 */;
  %751 = multiply(%750, 8f /* ty=float32 */) /* ty=Tensor[(1, 256, 14, 14), float32] */;
  %752 = round(%751) /* ty=Tensor[(1, 256, 14, 14), float32] */;
  %753 = clip(%752, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 256, 14, 14), float32] */;
  %754 = cast(%753, dtype="int8") /* ty=Tensor[(1, 256, 14, 14), int8] */;
  %755 = nn.conv2d(%754, meta[relay.Constant][108] /* ty=Tensor[(1024, 256, 1, 1), int8] */, padding=[0, 0, 0, 0], channels=1024, kernel_size=[1, 1], out_dtype="int16") /* ty=Tensor[(1, 1024, 14, 14), int16] */;
  %756 = add(%755, 64i16 /* ty=int16 */) /* ty=Tensor[(1, 1024, 14, 14), int16] */;
  %757 = right_shift(%756, 7i16 /* ty=int16 */) /* ty=Tensor[(1, 1024, 14, 14), int16] */;
  %758 = clip(%757, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 1024, 14, 14), int16] */;
  %759 = cast(%758, dtype="int8") /* ty=Tensor[(1, 1024, 14, 14), int8] */;
  %760 = annotation.stop_fusion(%759) /* ty=Tensor[(1, 1024, 14, 14), int8] */;
  %761 = cast(%760, dtype="float32") /* ty=Tensor[(1, 1024, 14, 14), float32] */;
  %762 = multiply(%761, 0.125f /* ty=float32 */) /* ty=Tensor[(1, 1024, 14, 14), float32] */;
  %763 = nn.bias_add(%762, meta[relay.Constant][109] /* ty=Tensor[(1024), float32] */) /* ty=Tensor[(1, 1024, 14, 14), float32] span=aten::_convolution_54:0:0 */;
  %764 = add(%763, %722) /* ty=Tensor[(1, 1024, 14, 14), float32] span=aten::add__16:0:0 */;
  %765 = nn.relu(%764) /* ty=Tensor[(1, 1024, 14, 14), float32] span=aten::relu__51:0:0 */;
  %766 = multiply(%765, 8f /* ty=float32 */) /* ty=Tensor[(1, 1024, 14, 14), float32] */;
  %767 = round(%766) /* ty=Tensor[(1, 1024, 14, 14), float32] */;
  %768 = clip(%767, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 1024, 14, 14), float32] */;
  %769 = cast(%768, dtype="int8") /* ty=Tensor[(1, 1024, 14, 14), int8] */;
  %770 = nn.conv2d(%769, meta[relay.Constant][110] /* ty=Tensor[(256, 1024, 1, 1), int8] */, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1], out_dtype="int16") /* ty=Tensor[(1, 256, 14, 14), int16] */;
  %771 = add(%770, 128i16 /* ty=int16 */) /* ty=Tensor[(1, 256, 14, 14), int16] */;
  %772 = right_shift(%771, 8i16 /* ty=int16 */) /* ty=Tensor[(1, 256, 14, 14), int16] */;
  %773 = clip(%772, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 256, 14, 14), int16] */;
  %774 = cast(%773, dtype="int8") /* ty=Tensor[(1, 256, 14, 14), int8] */;
  %775 = annotation.stop_fusion(%774) /* ty=Tensor[(1, 256, 14, 14), int8] */;
  %776 = cast(%775, dtype="float32") /* ty=Tensor[(1, 256, 14, 14), float32] */;
  %777 = multiply(%776, 0.125f /* ty=float32 */) /* ty=Tensor[(1, 256, 14, 14), float32] */;
  %778 = nn.bias_add(%777, meta[relay.Constant][111] /* ty=Tensor[(256), float32] */) /* ty=Tensor[(1, 256, 14, 14), float32] span=aten::_convolution_55:0:0 */;
  %779 = nn.relu(%778) /* ty=Tensor[(1, 256, 14, 14), float32] span=aten::relu__52:0:0 */;
  %780 = multiply(%779, 8f /* ty=float32 */) /* ty=Tensor[(1, 256, 14, 14), float32] */;
  %781 = round(%780) /* ty=Tensor[(1, 256, 14, 14), float32] */;
  %782 = clip(%781, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 256, 14, 14), float32] */;
  %783 = cast(%782, dtype="int8") /* ty=Tensor[(1, 256, 14, 14), int8] */;
  %784 = nn.conv2d(%783, meta[relay.Constant][112] /* ty=Tensor[(256, 256, 3, 3), int8] */, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3], out_dtype="int16") /* ty=Tensor[(1, 256, 14, 14), int16] */;
  %785 = add(%784, 64i16 /* ty=int16 */) /* ty=Tensor[(1, 256, 14, 14), int16] */;
  %786 = right_shift(%785, 7i16 /* ty=int16 */) /* ty=Tensor[(1, 256, 14, 14), int16] */;
  %787 = clip(%786, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 256, 14, 14), int16] */;
  %788 = cast(%787, dtype="int8") /* ty=Tensor[(1, 256, 14, 14), int8] */;
  %789 = annotation.stop_fusion(%788) /* ty=Tensor[(1, 256, 14, 14), int8] */;
  %790 = cast(%789, dtype="float32") /* ty=Tensor[(1, 256, 14, 14), float32] */;
  %791 = multiply(%790, 0.125f /* ty=float32 */) /* ty=Tensor[(1, 256, 14, 14), float32] */;
  %792 = nn.bias_add(%791, meta[relay.Constant][113] /* ty=Tensor[(256), float32] */) /* ty=Tensor[(1, 256, 14, 14), float32] span=aten::_convolution_56:0:0 */;
  %793 = nn.relu(%792) /* ty=Tensor[(1, 256, 14, 14), float32] span=aten::relu__53:0:0 */;
  %794 = multiply(%793, 8f /* ty=float32 */) /* ty=Tensor[(1, 256, 14, 14), float32] */;
  %795 = round(%794) /* ty=Tensor[(1, 256, 14, 14), float32] */;
  %796 = clip(%795, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 256, 14, 14), float32] */;
  %797 = cast(%796, dtype="int8") /* ty=Tensor[(1, 256, 14, 14), int8] */;
  %798 = nn.conv2d(%797, meta[relay.Constant][114] /* ty=Tensor[(1024, 256, 1, 1), int8] */, padding=[0, 0, 0, 0], channels=1024, kernel_size=[1, 1], out_dtype="int16") /* ty=Tensor[(1, 1024, 14, 14), int16] */;
  %799 = add(%798, 32i16 /* ty=int16 */) /* ty=Tensor[(1, 1024, 14, 14), int16] */;
  %800 = right_shift(%799, 6i16 /* ty=int16 */) /* ty=Tensor[(1, 1024, 14, 14), int16] */;
  %801 = clip(%800, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 1024, 14, 14), int16] */;
  %802 = cast(%801, dtype="int8") /* ty=Tensor[(1, 1024, 14, 14), int8] */;
  %803 = annotation.stop_fusion(%802) /* ty=Tensor[(1, 1024, 14, 14), int8] */;
  %804 = cast(%803, dtype="float32") /* ty=Tensor[(1, 1024, 14, 14), float32] */;
  %805 = multiply(%804, 0.125f /* ty=float32 */) /* ty=Tensor[(1, 1024, 14, 14), float32] */;
  %806 = nn.bias_add(%805, meta[relay.Constant][115] /* ty=Tensor[(1024), float32] */) /* ty=Tensor[(1, 1024, 14, 14), float32] span=aten::_convolution_57:0:0 */;
  %807 = add(%806, %765) /* ty=Tensor[(1, 1024, 14, 14), float32] span=aten::add__17:0:0 */;
  %808 = nn.relu(%807) /* ty=Tensor[(1, 1024, 14, 14), float32] span=aten::relu__54:0:0 */;
  %809 = multiply(%808, 8f /* ty=float32 */) /* ty=Tensor[(1, 1024, 14, 14), float32] */;
  %810 = round(%809) /* ty=Tensor[(1, 1024, 14, 14), float32] */;
  %811 = clip(%810, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 1024, 14, 14), float32] */;
  %812 = cast(%811, dtype="int8") /* ty=Tensor[(1, 1024, 14, 14), int8] */;
  %813 = nn.conv2d(%812, meta[relay.Constant][116] /* ty=Tensor[(256, 1024, 1, 1), int8] */, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1], out_dtype="int16") /* ty=Tensor[(1, 256, 14, 14), int16] */;
  %814 = add(%813, 256i16 /* ty=int16 */) /* ty=Tensor[(1, 256, 14, 14), int16] */;
  %815 = right_shift(%814, 9i16 /* ty=int16 */) /* ty=Tensor[(1, 256, 14, 14), int16] */;
  %816 = clip(%815, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 256, 14, 14), int16] */;
  %817 = cast(%816, dtype="int8") /* ty=Tensor[(1, 256, 14, 14), int8] */;
  %818 = annotation.stop_fusion(%817) /* ty=Tensor[(1, 256, 14, 14), int8] */;
  %819 = cast(%818, dtype="float32") /* ty=Tensor[(1, 256, 14, 14), float32] */;
  %820 = multiply(%819, 0.125f /* ty=float32 */) /* ty=Tensor[(1, 256, 14, 14), float32] */;
  %821 = nn.bias_add(%820, meta[relay.Constant][117] /* ty=Tensor[(256), float32] */) /* ty=Tensor[(1, 256, 14, 14), float32] span=aten::_convolution_58:0:0 */;
  %822 = nn.relu(%821) /* ty=Tensor[(1, 256, 14, 14), float32] span=aten::relu__55:0:0 */;
  %823 = multiply(%822, 8f /* ty=float32 */) /* ty=Tensor[(1, 256, 14, 14), float32] */;
  %824 = round(%823) /* ty=Tensor[(1, 256, 14, 14), float32] */;
  %825 = clip(%824, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 256, 14, 14), float32] */;
  %826 = cast(%825, dtype="int8") /* ty=Tensor[(1, 256, 14, 14), int8] */;
  %827 = nn.conv2d(%826, meta[relay.Constant][118] /* ty=Tensor[(256, 256, 3, 3), int8] */, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3], out_dtype="int16") /* ty=Tensor[(1, 256, 14, 14), int16] */;
  %828 = add(%827, 64i16 /* ty=int16 */) /* ty=Tensor[(1, 256, 14, 14), int16] */;
  %829 = right_shift(%828, 7i16 /* ty=int16 */) /* ty=Tensor[(1, 256, 14, 14), int16] */;
  %830 = clip(%829, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 256, 14, 14), int16] */;
  %831 = cast(%830, dtype="int8") /* ty=Tensor[(1, 256, 14, 14), int8] */;
  %832 = annotation.stop_fusion(%831) /* ty=Tensor[(1, 256, 14, 14), int8] */;
  %833 = cast(%832, dtype="float32") /* ty=Tensor[(1, 256, 14, 14), float32] */;
  %834 = multiply(%833, 0.125f /* ty=float32 */) /* ty=Tensor[(1, 256, 14, 14), float32] */;
  %835 = nn.bias_add(%834, meta[relay.Constant][119] /* ty=Tensor[(256), float32] */) /* ty=Tensor[(1, 256, 14, 14), float32] span=aten::_convolution_59:0:0 */;
  %836 = nn.relu(%835) /* ty=Tensor[(1, 256, 14, 14), float32] span=aten::relu__56:0:0 */;
  %837 = multiply(%836, 8f /* ty=float32 */) /* ty=Tensor[(1, 256, 14, 14), float32] */;
  %838 = round(%837) /* ty=Tensor[(1, 256, 14, 14), float32] */;
  %839 = clip(%838, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 256, 14, 14), float32] */;
  %840 = cast(%839, dtype="int8") /* ty=Tensor[(1, 256, 14, 14), int8] */;
  %841 = nn.conv2d(%840, meta[relay.Constant][120] /* ty=Tensor[(1024, 256, 1, 1), int8] */, padding=[0, 0, 0, 0], channels=1024, kernel_size=[1, 1], out_dtype="int16") /* ty=Tensor[(1, 1024, 14, 14), int16] */;
  %842 = add(%841, 32i16 /* ty=int16 */) /* ty=Tensor[(1, 1024, 14, 14), int16] */;
  %843 = right_shift(%842, 6i16 /* ty=int16 */) /* ty=Tensor[(1, 1024, 14, 14), int16] */;
  %844 = clip(%843, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 1024, 14, 14), int16] */;
  %845 = cast(%844, dtype="int8") /* ty=Tensor[(1, 1024, 14, 14), int8] */;
  %846 = annotation.stop_fusion(%845) /* ty=Tensor[(1, 1024, 14, 14), int8] */;
  %847 = cast(%846, dtype="float32") /* ty=Tensor[(1, 1024, 14, 14), float32] */;
  %848 = multiply(%847, 0.125f /* ty=float32 */) /* ty=Tensor[(1, 1024, 14, 14), float32] */;
  %849 = nn.bias_add(%848, meta[relay.Constant][121] /* ty=Tensor[(1024), float32] */) /* ty=Tensor[(1, 1024, 14, 14), float32] span=aten::_convolution_60:0:0 */;
  %850 = add(%849, %808) /* ty=Tensor[(1, 1024, 14, 14), float32] span=aten::add__18:0:0 */;
  %851 = nn.relu(%850) /* ty=Tensor[(1, 1024, 14, 14), float32] span=aten::relu__57:0:0 */;
  %852 = multiply(%851, 8f /* ty=float32 */) /* ty=Tensor[(1, 1024, 14, 14), float32] */;
  %853 = round(%852) /* ty=Tensor[(1, 1024, 14, 14), float32] */;
  %854 = clip(%853, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 1024, 14, 14), float32] */;
  %855 = cast(%854, dtype="int8") /* ty=Tensor[(1, 1024, 14, 14), int8] */;
  %856 = nn.conv2d(%855, meta[relay.Constant][122] /* ty=Tensor[(256, 1024, 1, 1), int8] */, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1], out_dtype="int16") /* ty=Tensor[(1, 256, 14, 14), int16] */;
  %857 = add(%856, 128i16 /* ty=int16 */) /* ty=Tensor[(1, 256, 14, 14), int16] */;
  %858 = right_shift(%857, 8i16 /* ty=int16 */) /* ty=Tensor[(1, 256, 14, 14), int16] */;
  %859 = clip(%858, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 256, 14, 14), int16] */;
  %860 = cast(%859, dtype="int8") /* ty=Tensor[(1, 256, 14, 14), int8] */;
  %861 = annotation.stop_fusion(%860) /* ty=Tensor[(1, 256, 14, 14), int8] */;
  %862 = cast(%861, dtype="float32") /* ty=Tensor[(1, 256, 14, 14), float32] */;
  %863 = multiply(%862, 0.125f /* ty=float32 */) /* ty=Tensor[(1, 256, 14, 14), float32] */;
  %864 = nn.bias_add(%863, meta[relay.Constant][123] /* ty=Tensor[(256), float32] */) /* ty=Tensor[(1, 256, 14, 14), float32] span=aten::_convolution_61:0:0 */;
  %865 = nn.relu(%864) /* ty=Tensor[(1, 256, 14, 14), float32] span=aten::relu__58:0:0 */;
  %866 = multiply(%865, 8f /* ty=float32 */) /* ty=Tensor[(1, 256, 14, 14), float32] */;
  %867 = round(%866) /* ty=Tensor[(1, 256, 14, 14), float32] */;
  %868 = clip(%867, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 256, 14, 14), float32] */;
  %869 = cast(%868, dtype="int8") /* ty=Tensor[(1, 256, 14, 14), int8] */;
  %870 = nn.conv2d(%869, meta[relay.Constant][124] /* ty=Tensor[(256, 256, 3, 3), int8] */, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3], out_dtype="int16") /* ty=Tensor[(1, 256, 14, 14), int16] */;
  %871 = add(%870, 64i16 /* ty=int16 */) /* ty=Tensor[(1, 256, 14, 14), int16] */;
  %872 = right_shift(%871, 7i16 /* ty=int16 */) /* ty=Tensor[(1, 256, 14, 14), int16] */;
  %873 = clip(%872, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 256, 14, 14), int16] */;
  %874 = cast(%873, dtype="int8") /* ty=Tensor[(1, 256, 14, 14), int8] */;
  %875 = annotation.stop_fusion(%874) /* ty=Tensor[(1, 256, 14, 14), int8] */;
  %876 = cast(%875, dtype="float32") /* ty=Tensor[(1, 256, 14, 14), float32] */;
  %877 = multiply(%876, 0.125f /* ty=float32 */) /* ty=Tensor[(1, 256, 14, 14), float32] */;
  %878 = nn.bias_add(%877, meta[relay.Constant][125] /* ty=Tensor[(256), float32] */) /* ty=Tensor[(1, 256, 14, 14), float32] span=aten::_convolution_62:0:0 */;
  %879 = nn.relu(%878) /* ty=Tensor[(1, 256, 14, 14), float32] span=aten::relu__59:0:0 */;
  %880 = multiply(%879, 8f /* ty=float32 */) /* ty=Tensor[(1, 256, 14, 14), float32] */;
  %881 = round(%880) /* ty=Tensor[(1, 256, 14, 14), float32] */;
  %882 = clip(%881, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 256, 14, 14), float32] */;
  %883 = cast(%882, dtype="int8") /* ty=Tensor[(1, 256, 14, 14), int8] */;
  %884 = nn.conv2d(%883, meta[relay.Constant][126] /* ty=Tensor[(1024, 256, 1, 1), int8] */, padding=[0, 0, 0, 0], channels=1024, kernel_size=[1, 1], out_dtype="int16") /* ty=Tensor[(1, 1024, 14, 14), int16] */;
  %885 = add(%884, 32i16 /* ty=int16 */) /* ty=Tensor[(1, 1024, 14, 14), int16] */;
  %886 = right_shift(%885, 6i16 /* ty=int16 */) /* ty=Tensor[(1, 1024, 14, 14), int16] */;
  %887 = clip(%886, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 1024, 14, 14), int16] */;
  %888 = cast(%887, dtype="int8") /* ty=Tensor[(1, 1024, 14, 14), int8] */;
  %889 = annotation.stop_fusion(%888) /* ty=Tensor[(1, 1024, 14, 14), int8] */;
  %890 = cast(%889, dtype="float32") /* ty=Tensor[(1, 1024, 14, 14), float32] */;
  %891 = multiply(%890, 0.125f /* ty=float32 */) /* ty=Tensor[(1, 1024, 14, 14), float32] */;
  %892 = nn.bias_add(%891, meta[relay.Constant][127] /* ty=Tensor[(1024), float32] */) /* ty=Tensor[(1, 1024, 14, 14), float32] span=aten::_convolution_63:0:0 */;
  %893 = add(%892, %851) /* ty=Tensor[(1, 1024, 14, 14), float32] span=aten::add__19:0:0 */;
  %894 = nn.relu(%893) /* ty=Tensor[(1, 1024, 14, 14), float32] span=aten::relu__60:0:0 */;
  %895 = multiply(%894, 8f /* ty=float32 */) /* ty=Tensor[(1, 1024, 14, 14), float32] */;
  %896 = round(%895) /* ty=Tensor[(1, 1024, 14, 14), float32] */;
  %897 = clip(%896, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 1024, 14, 14), float32] */;
  %898 = cast(%897, dtype="int8") /* ty=Tensor[(1, 1024, 14, 14), int8] */;
  %899 = nn.conv2d(%898, meta[relay.Constant][128] /* ty=Tensor[(256, 1024, 1, 1), int8] */, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1], out_dtype="int16") /* ty=Tensor[(1, 256, 14, 14), int16] */;
  %900 = add(%899, 128i16 /* ty=int16 */) /* ty=Tensor[(1, 256, 14, 14), int16] */;
  %901 = right_shift(%900, 8i16 /* ty=int16 */) /* ty=Tensor[(1, 256, 14, 14), int16] */;
  %902 = clip(%901, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 256, 14, 14), int16] */;
  %903 = cast(%902, dtype="int8") /* ty=Tensor[(1, 256, 14, 14), int8] */;
  %904 = annotation.stop_fusion(%903) /* ty=Tensor[(1, 256, 14, 14), int8] */;
  %905 = cast(%904, dtype="float32") /* ty=Tensor[(1, 256, 14, 14), float32] */;
  %906 = multiply(%905, 0.125f /* ty=float32 */) /* ty=Tensor[(1, 256, 14, 14), float32] */;
  %907 = nn.bias_add(%906, meta[relay.Constant][129] /* ty=Tensor[(256), float32] */) /* ty=Tensor[(1, 256, 14, 14), float32] span=aten::_convolution_64:0:0 */;
  %908 = nn.relu(%907) /* ty=Tensor[(1, 256, 14, 14), float32] span=aten::relu__61:0:0 */;
  %909 = multiply(%908, 8f /* ty=float32 */) /* ty=Tensor[(1, 256, 14, 14), float32] */;
  %910 = round(%909) /* ty=Tensor[(1, 256, 14, 14), float32] */;
  %911 = clip(%910, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 256, 14, 14), float32] */;
  %912 = cast(%911, dtype="int8") /* ty=Tensor[(1, 256, 14, 14), int8] */;
  %913 = nn.conv2d(%912, meta[relay.Constant][130] /* ty=Tensor[(256, 256, 3, 3), int8] */, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3], out_dtype="int16") /* ty=Tensor[(1, 256, 14, 14), int16] */;
  %914 = add(%913, 64i16 /* ty=int16 */) /* ty=Tensor[(1, 256, 14, 14), int16] */;
  %915 = right_shift(%914, 7i16 /* ty=int16 */) /* ty=Tensor[(1, 256, 14, 14), int16] */;
  %916 = clip(%915, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 256, 14, 14), int16] */;
  %917 = cast(%916, dtype="int8") /* ty=Tensor[(1, 256, 14, 14), int8] */;
  %918 = annotation.stop_fusion(%917) /* ty=Tensor[(1, 256, 14, 14), int8] */;
  %919 = cast(%918, dtype="float32") /* ty=Tensor[(1, 256, 14, 14), float32] */;
  %920 = multiply(%919, 0.125f /* ty=float32 */) /* ty=Tensor[(1, 256, 14, 14), float32] */;
  %921 = nn.bias_add(%920, meta[relay.Constant][131] /* ty=Tensor[(256), float32] */) /* ty=Tensor[(1, 256, 14, 14), float32] span=aten::_convolution_65:0:0 */;
  %922 = nn.relu(%921) /* ty=Tensor[(1, 256, 14, 14), float32] span=aten::relu__62:0:0 */;
  %923 = multiply(%922, 8f /* ty=float32 */) /* ty=Tensor[(1, 256, 14, 14), float32] */;
  %924 = round(%923) /* ty=Tensor[(1, 256, 14, 14), float32] */;
  %925 = clip(%924, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 256, 14, 14), float32] */;
  %926 = cast(%925, dtype="int8") /* ty=Tensor[(1, 256, 14, 14), int8] */;
  %927 = nn.conv2d(%926, meta[relay.Constant][132] /* ty=Tensor[(1024, 256, 1, 1), int8] */, padding=[0, 0, 0, 0], channels=1024, kernel_size=[1, 1], out_dtype="int16") /* ty=Tensor[(1, 1024, 14, 14), int16] */;
  %928 = add(%927, 32i16 /* ty=int16 */) /* ty=Tensor[(1, 1024, 14, 14), int16] */;
  %929 = right_shift(%928, 6i16 /* ty=int16 */) /* ty=Tensor[(1, 1024, 14, 14), int16] */;
  %930 = clip(%929, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 1024, 14, 14), int16] */;
  %931 = cast(%930, dtype="int8") /* ty=Tensor[(1, 1024, 14, 14), int8] */;
  %932 = annotation.stop_fusion(%931) /* ty=Tensor[(1, 1024, 14, 14), int8] */;
  %933 = cast(%932, dtype="float32") /* ty=Tensor[(1, 1024, 14, 14), float32] */;
  %934 = multiply(%933, 0.125f /* ty=float32 */) /* ty=Tensor[(1, 1024, 14, 14), float32] */;
  %935 = nn.bias_add(%934, meta[relay.Constant][133] /* ty=Tensor[(1024), float32] */) /* ty=Tensor[(1, 1024, 14, 14), float32] span=aten::_convolution_66:0:0 */;
  %936 = add(%935, %894) /* ty=Tensor[(1, 1024, 14, 14), float32] span=aten::add__20:0:0 */;
  %937 = nn.relu(%936) /* ty=Tensor[(1, 1024, 14, 14), float32] span=aten::relu__63:0:0 */;
  %938 = multiply(%937, 8f /* ty=float32 */) /* ty=Tensor[(1, 1024, 14, 14), float32] */;
  %939 = round(%938) /* ty=Tensor[(1, 1024, 14, 14), float32] */;
  %940 = clip(%939, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 1024, 14, 14), float32] */;
  %941 = cast(%940, dtype="int8") /* ty=Tensor[(1, 1024, 14, 14), int8] */;
  %942 = nn.conv2d(%941, meta[relay.Constant][134] /* ty=Tensor[(256, 1024, 1, 1), int8] */, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1], out_dtype="int16") /* ty=Tensor[(1, 256, 14, 14), int16] */;
  %943 = add(%942, 128i16 /* ty=int16 */) /* ty=Tensor[(1, 256, 14, 14), int16] */;
  %944 = right_shift(%943, 8i16 /* ty=int16 */) /* ty=Tensor[(1, 256, 14, 14), int16] */;
  %945 = clip(%944, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 256, 14, 14), int16] */;
  %946 = cast(%945, dtype="int8") /* ty=Tensor[(1, 256, 14, 14), int8] */;
  %947 = annotation.stop_fusion(%946) /* ty=Tensor[(1, 256, 14, 14), int8] */;
  %948 = cast(%947, dtype="float32") /* ty=Tensor[(1, 256, 14, 14), float32] */;
  %949 = multiply(%948, 0.125f /* ty=float32 */) /* ty=Tensor[(1, 256, 14, 14), float32] */;
  %950 = nn.bias_add(%949, meta[relay.Constant][135] /* ty=Tensor[(256), float32] */) /* ty=Tensor[(1, 256, 14, 14), float32] span=aten::_convolution_67:0:0 */;
  %951 = nn.relu(%950) /* ty=Tensor[(1, 256, 14, 14), float32] span=aten::relu__64:0:0 */;
  %952 = multiply(%951, 8f /* ty=float32 */) /* ty=Tensor[(1, 256, 14, 14), float32] */;
  %953 = round(%952) /* ty=Tensor[(1, 256, 14, 14), float32] */;
  %954 = clip(%953, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 256, 14, 14), float32] */;
  %955 = cast(%954, dtype="int8") /* ty=Tensor[(1, 256, 14, 14), int8] */;
  %956 = nn.conv2d(%955, meta[relay.Constant][136] /* ty=Tensor[(256, 256, 3, 3), int8] */, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3], out_dtype="int16") /* ty=Tensor[(1, 256, 14, 14), int16] */;
  %957 = add(%956, 128i16 /* ty=int16 */) /* ty=Tensor[(1, 256, 14, 14), int16] */;
  %958 = right_shift(%957, 8i16 /* ty=int16 */) /* ty=Tensor[(1, 256, 14, 14), int16] */;
  %959 = clip(%958, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 256, 14, 14), int16] */;
  %960 = cast(%959, dtype="int8") /* ty=Tensor[(1, 256, 14, 14), int8] */;
  %961 = annotation.stop_fusion(%960) /* ty=Tensor[(1, 256, 14, 14), int8] */;
  %962 = cast(%961, dtype="float32") /* ty=Tensor[(1, 256, 14, 14), float32] */;
  %963 = multiply(%962, 0.125f /* ty=float32 */) /* ty=Tensor[(1, 256, 14, 14), float32] */;
  %964 = nn.bias_add(%963, meta[relay.Constant][137] /* ty=Tensor[(256), float32] */) /* ty=Tensor[(1, 256, 14, 14), float32] span=aten::_convolution_68:0:0 */;
  %965 = nn.relu(%964) /* ty=Tensor[(1, 256, 14, 14), float32] span=aten::relu__65:0:0 */;
  %966 = multiply(%965, 8f /* ty=float32 */) /* ty=Tensor[(1, 256, 14, 14), float32] */;
  %967 = round(%966) /* ty=Tensor[(1, 256, 14, 14), float32] */;
  %968 = clip(%967, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 256, 14, 14), float32] */;
  %969 = cast(%968, dtype="int8") /* ty=Tensor[(1, 256, 14, 14), int8] */;
  %970 = nn.conv2d(%969, meta[relay.Constant][138] /* ty=Tensor[(1024, 256, 1, 1), int8] */, padding=[0, 0, 0, 0], channels=1024, kernel_size=[1, 1], out_dtype="int16") /* ty=Tensor[(1, 1024, 14, 14), int16] */;
  %971 = add(%970, 32i16 /* ty=int16 */) /* ty=Tensor[(1, 1024, 14, 14), int16] */;
  %972 = right_shift(%971, 6i16 /* ty=int16 */) /* ty=Tensor[(1, 1024, 14, 14), int16] */;
  %973 = clip(%972, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 1024, 14, 14), int16] */;
  %974 = cast(%973, dtype="int8") /* ty=Tensor[(1, 1024, 14, 14), int8] */;
  %975 = annotation.stop_fusion(%974) /* ty=Tensor[(1, 1024, 14, 14), int8] */;
  %976 = cast(%975, dtype="float32") /* ty=Tensor[(1, 1024, 14, 14), float32] */;
  %977 = multiply(%976, 0.125f /* ty=float32 */) /* ty=Tensor[(1, 1024, 14, 14), float32] */;
  %978 = nn.bias_add(%977, meta[relay.Constant][139] /* ty=Tensor[(1024), float32] */) /* ty=Tensor[(1, 1024, 14, 14), float32] span=aten::_convolution_69:0:0 */;
  %979 = add(%978, %937) /* ty=Tensor[(1, 1024, 14, 14), float32] span=aten::add__21:0:0 */;
  %980 = nn.relu(%979) /* ty=Tensor[(1, 1024, 14, 14), float32] span=aten::relu__66:0:0 */;
  %981 = multiply(%980, 8f /* ty=float32 */) /* ty=Tensor[(1, 1024, 14, 14), float32] */;
  %982 = round(%981) /* ty=Tensor[(1, 1024, 14, 14), float32] */;
  %983 = clip(%982, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 1024, 14, 14), float32] */;
  %984 = cast(%983, dtype="int8") /* ty=Tensor[(1, 1024, 14, 14), int8] */;
  %985 = nn.conv2d(%984, meta[relay.Constant][140] /* ty=Tensor[(256, 1024, 1, 1), int8] */, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1], out_dtype="int16") /* ty=Tensor[(1, 256, 14, 14), int16] */;
  %986 = add(%985, 128i16 /* ty=int16 */) /* ty=Tensor[(1, 256, 14, 14), int16] */;
  %987 = right_shift(%986, 8i16 /* ty=int16 */) /* ty=Tensor[(1, 256, 14, 14), int16] */;
  %988 = clip(%987, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 256, 14, 14), int16] */;
  %989 = cast(%988, dtype="int8") /* ty=Tensor[(1, 256, 14, 14), int8] */;
  %990 = annotation.stop_fusion(%989) /* ty=Tensor[(1, 256, 14, 14), int8] */;
  %991 = cast(%990, dtype="float32") /* ty=Tensor[(1, 256, 14, 14), float32] */;
  %992 = multiply(%991, 0.125f /* ty=float32 */) /* ty=Tensor[(1, 256, 14, 14), float32] */;
  %993 = nn.bias_add(%992, meta[relay.Constant][141] /* ty=Tensor[(256), float32] */) /* ty=Tensor[(1, 256, 14, 14), float32] span=aten::_convolution_70:0:0 */;
  %994 = nn.relu(%993) /* ty=Tensor[(1, 256, 14, 14), float32] span=aten::relu__67:0:0 */;
  %995 = multiply(%994, 8f /* ty=float32 */) /* ty=Tensor[(1, 256, 14, 14), float32] */;
  %996 = round(%995) /* ty=Tensor[(1, 256, 14, 14), float32] */;
  %997 = clip(%996, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 256, 14, 14), float32] */;
  %998 = cast(%997, dtype="int8") /* ty=Tensor[(1, 256, 14, 14), int8] */;
  %999 = nn.conv2d(%998, meta[relay.Constant][142] /* ty=Tensor[(256, 256, 3, 3), int8] */, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3], out_dtype="int16") /* ty=Tensor[(1, 256, 14, 14), int16] */;
  %1000 = add(%999, 64i16 /* ty=int16 */) /* ty=Tensor[(1, 256, 14, 14), int16] */;
  %1001 = right_shift(%1000, 7i16 /* ty=int16 */) /* ty=Tensor[(1, 256, 14, 14), int16] */;
  %1002 = clip(%1001, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 256, 14, 14), int16] */;
  %1003 = cast(%1002, dtype="int8") /* ty=Tensor[(1, 256, 14, 14), int8] */;
  %1004 = annotation.stop_fusion(%1003) /* ty=Tensor[(1, 256, 14, 14), int8] */;
  %1005 = cast(%1004, dtype="float32") /* ty=Tensor[(1, 256, 14, 14), float32] */;
  %1006 = multiply(%1005, 0.125f /* ty=float32 */) /* ty=Tensor[(1, 256, 14, 14), float32] */;
  %1007 = nn.bias_add(%1006, meta[relay.Constant][143] /* ty=Tensor[(256), float32] */) /* ty=Tensor[(1, 256, 14, 14), float32] span=aten::_convolution_71:0:0 */;
  %1008 = nn.relu(%1007) /* ty=Tensor[(1, 256, 14, 14), float32] span=aten::relu__68:0:0 */;
  %1009 = multiply(%1008, 8f /* ty=float32 */) /* ty=Tensor[(1, 256, 14, 14), float32] */;
  %1010 = round(%1009) /* ty=Tensor[(1, 256, 14, 14), float32] */;
  %1011 = clip(%1010, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 256, 14, 14), float32] */;
  %1012 = cast(%1011, dtype="int8") /* ty=Tensor[(1, 256, 14, 14), int8] */;
  %1013 = nn.conv2d(%1012, meta[relay.Constant][144] /* ty=Tensor[(1024, 256, 1, 1), int8] */, padding=[0, 0, 0, 0], channels=1024, kernel_size=[1, 1], out_dtype="int16") /* ty=Tensor[(1, 1024, 14, 14), int16] */;
  %1014 = add(%1013, 32i16 /* ty=int16 */) /* ty=Tensor[(1, 1024, 14, 14), int16] */;
  %1015 = right_shift(%1014, 6i16 /* ty=int16 */) /* ty=Tensor[(1, 1024, 14, 14), int16] */;
  %1016 = clip(%1015, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 1024, 14, 14), int16] */;
  %1017 = cast(%1016, dtype="int8") /* ty=Tensor[(1, 1024, 14, 14), int8] */;
  %1018 = annotation.stop_fusion(%1017) /* ty=Tensor[(1, 1024, 14, 14), int8] */;
  %1019 = cast(%1018, dtype="float32") /* ty=Tensor[(1, 1024, 14, 14), float32] */;
  %1020 = multiply(%1019, 0.125f /* ty=float32 */) /* ty=Tensor[(1, 1024, 14, 14), float32] */;
  %1021 = nn.bias_add(%1020, meta[relay.Constant][145] /* ty=Tensor[(1024), float32] */) /* ty=Tensor[(1, 1024, 14, 14), float32] span=aten::_convolution_72:0:0 */;
  %1022 = add(%1021, %980) /* ty=Tensor[(1, 1024, 14, 14), float32] span=aten::add__22:0:0 */;
  %1023 = nn.relu(%1022) /* ty=Tensor[(1, 1024, 14, 14), float32] span=aten::relu__69:0:0 */;
  %1024 = multiply(%1023, 8f /* ty=float32 */) /* ty=Tensor[(1, 1024, 14, 14), float32] */;
  %1025 = round(%1024) /* ty=Tensor[(1, 1024, 14, 14), float32] */;
  %1026 = clip(%1025, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 1024, 14, 14), float32] */;
  %1027 = cast(%1026, dtype="int8") /* ty=Tensor[(1, 1024, 14, 14), int8] */;
  %1028 = nn.conv2d(%1027, meta[relay.Constant][146] /* ty=Tensor[(256, 1024, 1, 1), int8] */, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1], out_dtype="int16") /* ty=Tensor[(1, 256, 14, 14), int16] */;
  %1029 = add(%1028, 256i16 /* ty=int16 */) /* ty=Tensor[(1, 256, 14, 14), int16] */;
  %1030 = right_shift(%1029, 9i16 /* ty=int16 */) /* ty=Tensor[(1, 256, 14, 14), int16] */;
  %1031 = clip(%1030, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 256, 14, 14), int16] */;
  %1032 = cast(%1031, dtype="int8") /* ty=Tensor[(1, 256, 14, 14), int8] */;
  %1033 = annotation.stop_fusion(%1032) /* ty=Tensor[(1, 256, 14, 14), int8] */;
  %1034 = cast(%1033, dtype="float32") /* ty=Tensor[(1, 256, 14, 14), float32] */;
  %1035 = multiply(%1034, 0.125f /* ty=float32 */) /* ty=Tensor[(1, 256, 14, 14), float32] */;
  %1036 = nn.bias_add(%1035, meta[relay.Constant][147] /* ty=Tensor[(256), float32] */) /* ty=Tensor[(1, 256, 14, 14), float32] span=aten::_convolution_73:0:0 */;
  %1037 = nn.relu(%1036) /* ty=Tensor[(1, 256, 14, 14), float32] span=aten::relu__70:0:0 */;
  %1038 = multiply(%1037, 8f /* ty=float32 */) /* ty=Tensor[(1, 256, 14, 14), float32] */;
  %1039 = round(%1038) /* ty=Tensor[(1, 256, 14, 14), float32] */;
  %1040 = clip(%1039, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 256, 14, 14), float32] */;
  %1041 = cast(%1040, dtype="int8") /* ty=Tensor[(1, 256, 14, 14), int8] */;
  %1042 = nn.conv2d(%1041, meta[relay.Constant][148] /* ty=Tensor[(256, 256, 3, 3), int8] */, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3], out_dtype="int16") /* ty=Tensor[(1, 256, 14, 14), int16] */;
  %1043 = add(%1042, 64i16 /* ty=int16 */) /* ty=Tensor[(1, 256, 14, 14), int16] */;
  %1044 = right_shift(%1043, 7i16 /* ty=int16 */) /* ty=Tensor[(1, 256, 14, 14), int16] */;
  %1045 = clip(%1044, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 256, 14, 14), int16] */;
  %1046 = cast(%1045, dtype="int8") /* ty=Tensor[(1, 256, 14, 14), int8] */;
  %1047 = annotation.stop_fusion(%1046) /* ty=Tensor[(1, 256, 14, 14), int8] */;
  %1048 = cast(%1047, dtype="float32") /* ty=Tensor[(1, 256, 14, 14), float32] */;
  %1049 = multiply(%1048, 0.125f /* ty=float32 */) /* ty=Tensor[(1, 256, 14, 14), float32] */;
  %1050 = nn.bias_add(%1049, meta[relay.Constant][149] /* ty=Tensor[(256), float32] */) /* ty=Tensor[(1, 256, 14, 14), float32] span=aten::_convolution_74:0:0 */;
  %1051 = nn.relu(%1050) /* ty=Tensor[(1, 256, 14, 14), float32] span=aten::relu__71:0:0 */;
  %1052 = multiply(%1051, 8f /* ty=float32 */) /* ty=Tensor[(1, 256, 14, 14), float32] */;
  %1053 = round(%1052) /* ty=Tensor[(1, 256, 14, 14), float32] */;
  %1054 = clip(%1053, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 256, 14, 14), float32] */;
  %1055 = cast(%1054, dtype="int8") /* ty=Tensor[(1, 256, 14, 14), int8] */;
  %1056 = nn.conv2d(%1055, meta[relay.Constant][150] /* ty=Tensor[(1024, 256, 1, 1), int8] */, padding=[0, 0, 0, 0], channels=1024, kernel_size=[1, 1], out_dtype="int16") /* ty=Tensor[(1, 1024, 14, 14), int16] */;
  %1057 = add(%1056, 32i16 /* ty=int16 */) /* ty=Tensor[(1, 1024, 14, 14), int16] */;
  %1058 = right_shift(%1057, 6i16 /* ty=int16 */) /* ty=Tensor[(1, 1024, 14, 14), int16] */;
  %1059 = clip(%1058, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 1024, 14, 14), int16] */;
  %1060 = cast(%1059, dtype="int8") /* ty=Tensor[(1, 1024, 14, 14), int8] */;
  %1061 = annotation.stop_fusion(%1060) /* ty=Tensor[(1, 1024, 14, 14), int8] */;
  %1062 = cast(%1061, dtype="float32") /* ty=Tensor[(1, 1024, 14, 14), float32] */;
  %1063 = multiply(%1062, 0.125f /* ty=float32 */) /* ty=Tensor[(1, 1024, 14, 14), float32] */;
  %1064 = nn.bias_add(%1063, meta[relay.Constant][151] /* ty=Tensor[(1024), float32] */) /* ty=Tensor[(1, 1024, 14, 14), float32] span=aten::_convolution_75:0:0 */;
  %1065 = add(%1064, %1023) /* ty=Tensor[(1, 1024, 14, 14), float32] span=aten::add__23:0:0 */;
  %1066 = nn.relu(%1065) /* ty=Tensor[(1, 1024, 14, 14), float32] span=aten::relu__72:0:0 */;
  %1067 = multiply(%1066, 8f /* ty=float32 */) /* ty=Tensor[(1, 1024, 14, 14), float32] */;
  %1068 = round(%1067) /* ty=Tensor[(1, 1024, 14, 14), float32] */;
  %1069 = clip(%1068, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 1024, 14, 14), float32] */;
  %1070 = cast(%1069, dtype="int8") /* ty=Tensor[(1, 1024, 14, 14), int8] */;
  %1071 = nn.conv2d(%1070, meta[relay.Constant][152] /* ty=Tensor[(256, 1024, 1, 1), int8] */, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1], out_dtype="int16") /* ty=Tensor[(1, 256, 14, 14), int16] */;
  %1072 = add(%1071, 256i16 /* ty=int16 */) /* ty=Tensor[(1, 256, 14, 14), int16] */;
  %1073 = right_shift(%1072, 9i16 /* ty=int16 */) /* ty=Tensor[(1, 256, 14, 14), int16] */;
  %1074 = clip(%1073, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 256, 14, 14), int16] */;
  %1075 = cast(%1074, dtype="int8") /* ty=Tensor[(1, 256, 14, 14), int8] */;
  %1076 = annotation.stop_fusion(%1075) /* ty=Tensor[(1, 256, 14, 14), int8] */;
  %1077 = cast(%1076, dtype="float32") /* ty=Tensor[(1, 256, 14, 14), float32] */;
  %1078 = multiply(%1077, 0.125f /* ty=float32 */) /* ty=Tensor[(1, 256, 14, 14), float32] */;
  %1079 = nn.bias_add(%1078, meta[relay.Constant][153] /* ty=Tensor[(256), float32] */) /* ty=Tensor[(1, 256, 14, 14), float32] span=aten::_convolution_76:0:0 */;
  %1080 = nn.relu(%1079) /* ty=Tensor[(1, 256, 14, 14), float32] span=aten::relu__73:0:0 */;
  %1081 = multiply(%1080, 8f /* ty=float32 */) /* ty=Tensor[(1, 256, 14, 14), float32] */;
  %1082 = round(%1081) /* ty=Tensor[(1, 256, 14, 14), float32] */;
  %1083 = clip(%1082, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 256, 14, 14), float32] */;
  %1084 = cast(%1083, dtype="int8") /* ty=Tensor[(1, 256, 14, 14), int8] */;
  %1085 = nn.conv2d(%1084, meta[relay.Constant][154] /* ty=Tensor[(256, 256, 3, 3), int8] */, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3], out_dtype="int16") /* ty=Tensor[(1, 256, 14, 14), int16] */;
  %1086 = add(%1085, 32i16 /* ty=int16 */) /* ty=Tensor[(1, 256, 14, 14), int16] */;
  %1087 = right_shift(%1086, 6i16 /* ty=int16 */) /* ty=Tensor[(1, 256, 14, 14), int16] */;
  %1088 = clip(%1087, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 256, 14, 14), int16] */;
  %1089 = cast(%1088, dtype="int8") /* ty=Tensor[(1, 256, 14, 14), int8] */;
  %1090 = annotation.stop_fusion(%1089) /* ty=Tensor[(1, 256, 14, 14), int8] */;
  %1091 = cast(%1090, dtype="float32") /* ty=Tensor[(1, 256, 14, 14), float32] */;
  %1092 = multiply(%1091, 0.125f /* ty=float32 */) /* ty=Tensor[(1, 256, 14, 14), float32] */;
  %1093 = nn.bias_add(%1092, meta[relay.Constant][155] /* ty=Tensor[(256), float32] */) /* ty=Tensor[(1, 256, 14, 14), float32] span=aten::_convolution_77:0:0 */;
  %1094 = nn.relu(%1093) /* ty=Tensor[(1, 256, 14, 14), float32] span=aten::relu__74:0:0 */;
  %1095 = multiply(%1094, 8f /* ty=float32 */) /* ty=Tensor[(1, 256, 14, 14), float32] */;
  %1096 = round(%1095) /* ty=Tensor[(1, 256, 14, 14), float32] */;
  %1097 = clip(%1096, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 256, 14, 14), float32] */;
  %1098 = cast(%1097, dtype="int8") /* ty=Tensor[(1, 256, 14, 14), int8] */;
  %1099 = nn.conv2d(%1098, meta[relay.Constant][156] /* ty=Tensor[(1024, 256, 1, 1), int8] */, padding=[0, 0, 0, 0], channels=1024, kernel_size=[1, 1], out_dtype="int16") /* ty=Tensor[(1, 1024, 14, 14), int16] */;
  %1100 = add(%1099, 32i16 /* ty=int16 */) /* ty=Tensor[(1, 1024, 14, 14), int16] */;
  %1101 = right_shift(%1100, 6i16 /* ty=int16 */) /* ty=Tensor[(1, 1024, 14, 14), int16] */;
  %1102 = clip(%1101, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 1024, 14, 14), int16] */;
  %1103 = cast(%1102, dtype="int8") /* ty=Tensor[(1, 1024, 14, 14), int8] */;
  %1104 = annotation.stop_fusion(%1103) /* ty=Tensor[(1, 1024, 14, 14), int8] */;
  %1105 = cast(%1104, dtype="float32") /* ty=Tensor[(1, 1024, 14, 14), float32] */;
  %1106 = multiply(%1105, 0.125f /* ty=float32 */) /* ty=Tensor[(1, 1024, 14, 14), float32] */;
  %1107 = nn.bias_add(%1106, meta[relay.Constant][157] /* ty=Tensor[(1024), float32] */) /* ty=Tensor[(1, 1024, 14, 14), float32] span=aten::_convolution_78:0:0 */;
  %1108 = add(%1107, %1066) /* ty=Tensor[(1, 1024, 14, 14), float32] span=aten::add__24:0:0 */;
  %1109 = nn.relu(%1108) /* ty=Tensor[(1, 1024, 14, 14), float32] span=aten::relu__75:0:0 */;
  %1110 = multiply(%1109, 8f /* ty=float32 */) /* ty=Tensor[(1, 1024, 14, 14), float32] */;
  %1111 = round(%1110) /* ty=Tensor[(1, 1024, 14, 14), float32] */;
  %1112 = clip(%1111, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 1024, 14, 14), float32] */;
  %1113 = cast(%1112, dtype="int8") /* ty=Tensor[(1, 1024, 14, 14), int8] */;
  %1114 = nn.conv2d(%1113, meta[relay.Constant][158] /* ty=Tensor[(256, 1024, 1, 1), int8] */, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1], out_dtype="int16") /* ty=Tensor[(1, 256, 14, 14), int16] */;
  %1115 = add(%1114, 256i16 /* ty=int16 */) /* ty=Tensor[(1, 256, 14, 14), int16] */;
  %1116 = right_shift(%1115, 9i16 /* ty=int16 */) /* ty=Tensor[(1, 256, 14, 14), int16] */;
  %1117 = clip(%1116, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 256, 14, 14), int16] */;
  %1118 = cast(%1117, dtype="int8") /* ty=Tensor[(1, 256, 14, 14), int8] */;
  %1119 = annotation.stop_fusion(%1118) /* ty=Tensor[(1, 256, 14, 14), int8] */;
  %1120 = cast(%1119, dtype="float32") /* ty=Tensor[(1, 256, 14, 14), float32] */;
  %1121 = multiply(%1120, 0.125f /* ty=float32 */) /* ty=Tensor[(1, 256, 14, 14), float32] */;
  %1122 = nn.bias_add(%1121, meta[relay.Constant][159] /* ty=Tensor[(256), float32] */) /* ty=Tensor[(1, 256, 14, 14), float32] span=aten::_convolution_79:0:0 */;
  %1123 = nn.relu(%1122) /* ty=Tensor[(1, 256, 14, 14), float32] span=aten::relu__76:0:0 */;
  %1124 = multiply(%1123, 8f /* ty=float32 */) /* ty=Tensor[(1, 256, 14, 14), float32] */;
  %1125 = round(%1124) /* ty=Tensor[(1, 256, 14, 14), float32] */;
  %1126 = clip(%1125, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 256, 14, 14), float32] */;
  %1127 = cast(%1126, dtype="int8") /* ty=Tensor[(1, 256, 14, 14), int8] */;
  %1128 = nn.conv2d(%1127, meta[relay.Constant][160] /* ty=Tensor[(256, 256, 3, 3), int8] */, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3], out_dtype="int16") /* ty=Tensor[(1, 256, 14, 14), int16] */;
  %1129 = add(%1128, 64i16 /* ty=int16 */) /* ty=Tensor[(1, 256, 14, 14), int16] */;
  %1130 = right_shift(%1129, 7i16 /* ty=int16 */) /* ty=Tensor[(1, 256, 14, 14), int16] */;
  %1131 = clip(%1130, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 256, 14, 14), int16] */;
  %1132 = cast(%1131, dtype="int8") /* ty=Tensor[(1, 256, 14, 14), int8] */;
  %1133 = annotation.stop_fusion(%1132) /* ty=Tensor[(1, 256, 14, 14), int8] */;
  %1134 = cast(%1133, dtype="float32") /* ty=Tensor[(1, 256, 14, 14), float32] */;
  %1135 = multiply(%1134, 0.125f /* ty=float32 */) /* ty=Tensor[(1, 256, 14, 14), float32] */;
  %1136 = nn.bias_add(%1135, meta[relay.Constant][161] /* ty=Tensor[(256), float32] */) /* ty=Tensor[(1, 256, 14, 14), float32] span=aten::_convolution_80:0:0 */;
  %1137 = nn.relu(%1136) /* ty=Tensor[(1, 256, 14, 14), float32] span=aten::relu__77:0:0 */;
  %1138 = multiply(%1137, 8f /* ty=float32 */) /* ty=Tensor[(1, 256, 14, 14), float32] */;
  %1139 = round(%1138) /* ty=Tensor[(1, 256, 14, 14), float32] */;
  %1140 = clip(%1139, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 256, 14, 14), float32] */;
  %1141 = cast(%1140, dtype="int8") /* ty=Tensor[(1, 256, 14, 14), int8] */;
  %1142 = nn.conv2d(%1141, meta[relay.Constant][162] /* ty=Tensor[(1024, 256, 1, 1), int8] */, padding=[0, 0, 0, 0], channels=1024, kernel_size=[1, 1], out_dtype="int16") /* ty=Tensor[(1, 1024, 14, 14), int16] */;
  %1143 = add(%1142, 16i16 /* ty=int16 */) /* ty=Tensor[(1, 1024, 14, 14), int16] */;
  %1144 = right_shift(%1143, 5i16 /* ty=int16 */) /* ty=Tensor[(1, 1024, 14, 14), int16] */;
  %1145 = clip(%1144, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 1024, 14, 14), int16] */;
  %1146 = cast(%1145, dtype="int8") /* ty=Tensor[(1, 1024, 14, 14), int8] */;
  %1147 = annotation.stop_fusion(%1146) /* ty=Tensor[(1, 1024, 14, 14), int8] */;
  %1148 = cast(%1147, dtype="float32") /* ty=Tensor[(1, 1024, 14, 14), float32] */;
  %1149 = multiply(%1148, 0.125f /* ty=float32 */) /* ty=Tensor[(1, 1024, 14, 14), float32] */;
  %1150 = nn.bias_add(%1149, meta[relay.Constant][163] /* ty=Tensor[(1024), float32] */) /* ty=Tensor[(1, 1024, 14, 14), float32] span=aten::_convolution_81:0:0 */;
  %1151 = add(%1150, %1109) /* ty=Tensor[(1, 1024, 14, 14), float32] span=aten::add__25:0:0 */;
  %1152 = nn.relu(%1151) /* ty=Tensor[(1, 1024, 14, 14), float32] span=aten::relu__78:0:0 */;
  %1153 = multiply(%1152, 8f /* ty=float32 */) /* ty=Tensor[(1, 1024, 14, 14), float32] */;
  %1154 = round(%1153) /* ty=Tensor[(1, 1024, 14, 14), float32] */;
  %1155 = clip(%1154, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 1024, 14, 14), float32] */;
  %1156 = cast(%1155, dtype="int8") /* ty=Tensor[(1, 1024, 14, 14), int8] */;
  %1157 = nn.conv2d(%1156, meta[relay.Constant][164] /* ty=Tensor[(256, 1024, 1, 1), int8] */, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1], out_dtype="int16") /* ty=Tensor[(1, 256, 14, 14), int16] */;
  %1158 = add(%1157, 256i16 /* ty=int16 */) /* ty=Tensor[(1, 256, 14, 14), int16] */;
  %1159 = right_shift(%1158, 9i16 /* ty=int16 */) /* ty=Tensor[(1, 256, 14, 14), int16] */;
  %1160 = clip(%1159, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 256, 14, 14), int16] */;
  %1161 = cast(%1160, dtype="int8") /* ty=Tensor[(1, 256, 14, 14), int8] */;
  %1162 = annotation.stop_fusion(%1161) /* ty=Tensor[(1, 256, 14, 14), int8] */;
  %1163 = cast(%1162, dtype="float32") /* ty=Tensor[(1, 256, 14, 14), float32] */;
  %1164 = multiply(%1163, 0.125f /* ty=float32 */) /* ty=Tensor[(1, 256, 14, 14), float32] */;
  %1165 = nn.bias_add(%1164, meta[relay.Constant][165] /* ty=Tensor[(256), float32] */) /* ty=Tensor[(1, 256, 14, 14), float32] span=aten::_convolution_82:0:0 */;
  %1166 = nn.relu(%1165) /* ty=Tensor[(1, 256, 14, 14), float32] span=aten::relu__79:0:0 */;
  %1167 = multiply(%1166, 8f /* ty=float32 */) /* ty=Tensor[(1, 256, 14, 14), float32] */;
  %1168 = round(%1167) /* ty=Tensor[(1, 256, 14, 14), float32] */;
  %1169 = clip(%1168, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 256, 14, 14), float32] */;
  %1170 = cast(%1169, dtype="int8") /* ty=Tensor[(1, 256, 14, 14), int8] */;
  %1171 = nn.conv2d(%1170, meta[relay.Constant][166] /* ty=Tensor[(256, 256, 3, 3), int8] */, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3], out_dtype="int16") /* ty=Tensor[(1, 256, 14, 14), int16] */;
  %1172 = add(%1171, 64i16 /* ty=int16 */) /* ty=Tensor[(1, 256, 14, 14), int16] */;
  %1173 = right_shift(%1172, 7i16 /* ty=int16 */) /* ty=Tensor[(1, 256, 14, 14), int16] */;
  %1174 = clip(%1173, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 256, 14, 14), int16] */;
  %1175 = cast(%1174, dtype="int8") /* ty=Tensor[(1, 256, 14, 14), int8] */;
  %1176 = annotation.stop_fusion(%1175) /* ty=Tensor[(1, 256, 14, 14), int8] */;
  %1177 = cast(%1176, dtype="float32") /* ty=Tensor[(1, 256, 14, 14), float32] */;
  %1178 = multiply(%1177, 0.125f /* ty=float32 */) /* ty=Tensor[(1, 256, 14, 14), float32] */;
  %1179 = nn.bias_add(%1178, meta[relay.Constant][167] /* ty=Tensor[(256), float32] */) /* ty=Tensor[(1, 256, 14, 14), float32] span=aten::_convolution_83:0:0 */;
  %1180 = nn.relu(%1179) /* ty=Tensor[(1, 256, 14, 14), float32] span=aten::relu__80:0:0 */;
  %1181 = multiply(%1180, 8f /* ty=float32 */) /* ty=Tensor[(1, 256, 14, 14), float32] */;
  %1182 = round(%1181) /* ty=Tensor[(1, 256, 14, 14), float32] */;
  %1183 = clip(%1182, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 256, 14, 14), float32] */;
  %1184 = cast(%1183, dtype="int8") /* ty=Tensor[(1, 256, 14, 14), int8] */;
  %1185 = nn.conv2d(%1184, meta[relay.Constant][168] /* ty=Tensor[(1024, 256, 1, 1), int8] */, padding=[0, 0, 0, 0], channels=1024, kernel_size=[1, 1], out_dtype="int16") /* ty=Tensor[(1, 1024, 14, 14), int16] */;
  %1186 = add(%1185, 32i16 /* ty=int16 */) /* ty=Tensor[(1, 1024, 14, 14), int16] */;
  %1187 = right_shift(%1186, 6i16 /* ty=int16 */) /* ty=Tensor[(1, 1024, 14, 14), int16] */;
  %1188 = clip(%1187, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 1024, 14, 14), int16] */;
  %1189 = cast(%1188, dtype="int8") /* ty=Tensor[(1, 1024, 14, 14), int8] */;
  %1190 = annotation.stop_fusion(%1189) /* ty=Tensor[(1, 1024, 14, 14), int8] */;
  %1191 = cast(%1190, dtype="float32") /* ty=Tensor[(1, 1024, 14, 14), float32] */;
  %1192 = multiply(%1191, 0.125f /* ty=float32 */) /* ty=Tensor[(1, 1024, 14, 14), float32] */;
  %1193 = nn.bias_add(%1192, meta[relay.Constant][169] /* ty=Tensor[(1024), float32] */) /* ty=Tensor[(1, 1024, 14, 14), float32] span=aten::_convolution_84:0:0 */;
  %1194 = add(%1193, %1152) /* ty=Tensor[(1, 1024, 14, 14), float32] span=aten::add__26:0:0 */;
  %1195 = nn.relu(%1194) /* ty=Tensor[(1, 1024, 14, 14), float32] span=aten::relu__81:0:0 */;
  %1196 = multiply(%1195, 8f /* ty=float32 */) /* ty=Tensor[(1, 1024, 14, 14), float32] */;
  %1197 = round(%1196) /* ty=Tensor[(1, 1024, 14, 14), float32] */;
  %1198 = clip(%1197, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 1024, 14, 14), float32] */;
  %1199 = cast(%1198, dtype="int8") /* ty=Tensor[(1, 1024, 14, 14), int8] */;
  %1200 = nn.conv2d(%1199, meta[relay.Constant][170] /* ty=Tensor[(256, 1024, 1, 1), int8] */, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1], out_dtype="int16") /* ty=Tensor[(1, 256, 14, 14), int16] */;
  %1201 = add(%1200, 128i16 /* ty=int16 */) /* ty=Tensor[(1, 256, 14, 14), int16] */;
  %1202 = right_shift(%1201, 8i16 /* ty=int16 */) /* ty=Tensor[(1, 256, 14, 14), int16] */;
  %1203 = clip(%1202, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 256, 14, 14), int16] */;
  %1204 = cast(%1203, dtype="int8") /* ty=Tensor[(1, 256, 14, 14), int8] */;
  %1205 = annotation.stop_fusion(%1204) /* ty=Tensor[(1, 256, 14, 14), int8] */;
  %1206 = cast(%1205, dtype="float32") /* ty=Tensor[(1, 256, 14, 14), float32] */;
  %1207 = multiply(%1206, 0.125f /* ty=float32 */) /* ty=Tensor[(1, 256, 14, 14), float32] */;
  %1208 = nn.bias_add(%1207, meta[relay.Constant][171] /* ty=Tensor[(256), float32] */) /* ty=Tensor[(1, 256, 14, 14), float32] span=aten::_convolution_85:0:0 */;
  %1209 = nn.relu(%1208) /* ty=Tensor[(1, 256, 14, 14), float32] span=aten::relu__82:0:0 */;
  %1210 = multiply(%1209, 8f /* ty=float32 */) /* ty=Tensor[(1, 256, 14, 14), float32] */;
  %1211 = round(%1210) /* ty=Tensor[(1, 256, 14, 14), float32] */;
  %1212 = clip(%1211, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 256, 14, 14), float32] */;
  %1213 = cast(%1212, dtype="int8") /* ty=Tensor[(1, 256, 14, 14), int8] */;
  %1214 = nn.conv2d(%1213, meta[relay.Constant][172] /* ty=Tensor[(256, 256, 3, 3), int8] */, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3], out_dtype="int16") /* ty=Tensor[(1, 256, 14, 14), int16] */;
  %1215 = add(%1214, 64i16 /* ty=int16 */) /* ty=Tensor[(1, 256, 14, 14), int16] */;
  %1216 = right_shift(%1215, 7i16 /* ty=int16 */) /* ty=Tensor[(1, 256, 14, 14), int16] */;
  %1217 = clip(%1216, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 256, 14, 14), int16] */;
  %1218 = cast(%1217, dtype="int8") /* ty=Tensor[(1, 256, 14, 14), int8] */;
  %1219 = annotation.stop_fusion(%1218) /* ty=Tensor[(1, 256, 14, 14), int8] */;
  %1220 = cast(%1219, dtype="float32") /* ty=Tensor[(1, 256, 14, 14), float32] */;
  %1221 = multiply(%1220, 0.125f /* ty=float32 */) /* ty=Tensor[(1, 256, 14, 14), float32] */;
  %1222 = nn.bias_add(%1221, meta[relay.Constant][173] /* ty=Tensor[(256), float32] */) /* ty=Tensor[(1, 256, 14, 14), float32] span=aten::_convolution_86:0:0 */;
  %1223 = nn.relu(%1222) /* ty=Tensor[(1, 256, 14, 14), float32] span=aten::relu__83:0:0 */;
  %1224 = multiply(%1223, 8f /* ty=float32 */) /* ty=Tensor[(1, 256, 14, 14), float32] */;
  %1225 = round(%1224) /* ty=Tensor[(1, 256, 14, 14), float32] */;
  %1226 = clip(%1225, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 256, 14, 14), float32] */;
  %1227 = cast(%1226, dtype="int8") /* ty=Tensor[(1, 256, 14, 14), int8] */;
  %1228 = nn.conv2d(%1227, meta[relay.Constant][174] /* ty=Tensor[(1024, 256, 1, 1), int8] */, padding=[0, 0, 0, 0], channels=1024, kernel_size=[1, 1], out_dtype="int16") /* ty=Tensor[(1, 1024, 14, 14), int16] */;
  %1229 = add(%1228, 32i16 /* ty=int16 */) /* ty=Tensor[(1, 1024, 14, 14), int16] */;
  %1230 = right_shift(%1229, 6i16 /* ty=int16 */) /* ty=Tensor[(1, 1024, 14, 14), int16] */;
  %1231 = clip(%1230, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 1024, 14, 14), int16] */;
  %1232 = cast(%1231, dtype="int8") /* ty=Tensor[(1, 1024, 14, 14), int8] */;
  %1233 = annotation.stop_fusion(%1232) /* ty=Tensor[(1, 1024, 14, 14), int8] */;
  %1234 = cast(%1233, dtype="float32") /* ty=Tensor[(1, 1024, 14, 14), float32] */;
  %1235 = multiply(%1234, 0.125f /* ty=float32 */) /* ty=Tensor[(1, 1024, 14, 14), float32] */;
  %1236 = nn.bias_add(%1235, meta[relay.Constant][175] /* ty=Tensor[(1024), float32] */) /* ty=Tensor[(1, 1024, 14, 14), float32] span=aten::_convolution_87:0:0 */;
  %1237 = add(%1236, %1195) /* ty=Tensor[(1, 1024, 14, 14), float32] span=aten::add__27:0:0 */;
  %1238 = nn.relu(%1237) /* ty=Tensor[(1, 1024, 14, 14), float32] span=aten::relu__84:0:0 */;
  %1239 = multiply(%1238, 8f /* ty=float32 */) /* ty=Tensor[(1, 1024, 14, 14), float32] */;
  %1240 = round(%1239) /* ty=Tensor[(1, 1024, 14, 14), float32] */;
  %1241 = clip(%1240, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 1024, 14, 14), float32] */;
  %1242 = cast(%1241, dtype="int8") /* ty=Tensor[(1, 1024, 14, 14), int8] */;
  %1243 = nn.conv2d(%1242, meta[relay.Constant][176] /* ty=Tensor[(256, 1024, 1, 1), int8] */, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1], out_dtype="int16") /* ty=Tensor[(1, 256, 14, 14), int16] */;
  %1244 = add(%1243, 128i16 /* ty=int16 */) /* ty=Tensor[(1, 256, 14, 14), int16] */;
  %1245 = right_shift(%1244, 8i16 /* ty=int16 */) /* ty=Tensor[(1, 256, 14, 14), int16] */;
  %1246 = clip(%1245, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 256, 14, 14), int16] */;
  %1247 = cast(%1246, dtype="int8") /* ty=Tensor[(1, 256, 14, 14), int8] */;
  %1248 = annotation.stop_fusion(%1247) /* ty=Tensor[(1, 256, 14, 14), int8] */;
  %1249 = cast(%1248, dtype="float32") /* ty=Tensor[(1, 256, 14, 14), float32] */;
  %1250 = multiply(%1249, 0.125f /* ty=float32 */) /* ty=Tensor[(1, 256, 14, 14), float32] */;
  %1251 = nn.bias_add(%1250, meta[relay.Constant][177] /* ty=Tensor[(256), float32] */) /* ty=Tensor[(1, 256, 14, 14), float32] span=aten::_convolution_88:0:0 */;
  %1252 = nn.relu(%1251) /* ty=Tensor[(1, 256, 14, 14), float32] span=aten::relu__85:0:0 */;
  %1253 = multiply(%1252, 8f /* ty=float32 */) /* ty=Tensor[(1, 256, 14, 14), float32] */;
  %1254 = round(%1253) /* ty=Tensor[(1, 256, 14, 14), float32] */;
  %1255 = clip(%1254, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 256, 14, 14), float32] */;
  %1256 = cast(%1255, dtype="int8") /* ty=Tensor[(1, 256, 14, 14), int8] */;
  %1257 = nn.conv2d(%1256, meta[relay.Constant][178] /* ty=Tensor[(256, 256, 3, 3), int8] */, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3], out_dtype="int16") /* ty=Tensor[(1, 256, 14, 14), int16] */;
  %1258 = add(%1257, 64i16 /* ty=int16 */) /* ty=Tensor[(1, 256, 14, 14), int16] */;
  %1259 = right_shift(%1258, 7i16 /* ty=int16 */) /* ty=Tensor[(1, 256, 14, 14), int16] */;
  %1260 = clip(%1259, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 256, 14, 14), int16] */;
  %1261 = cast(%1260, dtype="int8") /* ty=Tensor[(1, 256, 14, 14), int8] */;
  %1262 = annotation.stop_fusion(%1261) /* ty=Tensor[(1, 256, 14, 14), int8] */;
  %1263 = cast(%1262, dtype="float32") /* ty=Tensor[(1, 256, 14, 14), float32] */;
  %1264 = multiply(%1263, 0.125f /* ty=float32 */) /* ty=Tensor[(1, 256, 14, 14), float32] */;
  %1265 = nn.bias_add(%1264, meta[relay.Constant][179] /* ty=Tensor[(256), float32] */) /* ty=Tensor[(1, 256, 14, 14), float32] span=aten::_convolution_89:0:0 */;
  %1266 = nn.relu(%1265) /* ty=Tensor[(1, 256, 14, 14), float32] span=aten::relu__86:0:0 */;
  %1267 = multiply(%1266, 8f /* ty=float32 */) /* ty=Tensor[(1, 256, 14, 14), float32] */;
  %1268 = round(%1267) /* ty=Tensor[(1, 256, 14, 14), float32] */;
  %1269 = clip(%1268, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 256, 14, 14), float32] */;
  %1270 = cast(%1269, dtype="int8") /* ty=Tensor[(1, 256, 14, 14), int8] */;
  %1271 = nn.conv2d(%1270, meta[relay.Constant][180] /* ty=Tensor[(1024, 256, 1, 1), int8] */, padding=[0, 0, 0, 0], channels=1024, kernel_size=[1, 1], out_dtype="int16") /* ty=Tensor[(1, 1024, 14, 14), int16] */;
  %1272 = add(%1271, 32i16 /* ty=int16 */) /* ty=Tensor[(1, 1024, 14, 14), int16] */;
  %1273 = right_shift(%1272, 6i16 /* ty=int16 */) /* ty=Tensor[(1, 1024, 14, 14), int16] */;
  %1274 = clip(%1273, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 1024, 14, 14), int16] */;
  %1275 = cast(%1274, dtype="int8") /* ty=Tensor[(1, 1024, 14, 14), int8] */;
  %1276 = annotation.stop_fusion(%1275) /* ty=Tensor[(1, 1024, 14, 14), int8] */;
  %1277 = cast(%1276, dtype="float32") /* ty=Tensor[(1, 1024, 14, 14), float32] */;
  %1278 = multiply(%1277, 0.125f /* ty=float32 */) /* ty=Tensor[(1, 1024, 14, 14), float32] */;
  %1279 = nn.bias_add(%1278, meta[relay.Constant][181] /* ty=Tensor[(1024), float32] */) /* ty=Tensor[(1, 1024, 14, 14), float32] span=aten::_convolution_90:0:0 */;
  %1280 = add(%1279, %1238) /* ty=Tensor[(1, 1024, 14, 14), float32] span=aten::add__28:0:0 */;
  %1281 = nn.relu(%1280) /* ty=Tensor[(1, 1024, 14, 14), float32] span=aten::relu__87:0:0 */;
  %1282 = multiply(%1281, 8f /* ty=float32 */) /* ty=Tensor[(1, 1024, 14, 14), float32] */;
  %1283 = round(%1282) /* ty=Tensor[(1, 1024, 14, 14), float32] */;
  %1284 = clip(%1283, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 1024, 14, 14), float32] */;
  %1285 = cast(%1284, dtype="int8") /* ty=Tensor[(1, 1024, 14, 14), int8] */;
  %1286 = nn.conv2d(%1285, meta[relay.Constant][182] /* ty=Tensor[(256, 1024, 1, 1), int8] */, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1], out_dtype="int16") /* ty=Tensor[(1, 256, 14, 14), int16] */;
  %1287 = add(%1286, 128i16 /* ty=int16 */) /* ty=Tensor[(1, 256, 14, 14), int16] */;
  %1288 = right_shift(%1287, 8i16 /* ty=int16 */) /* ty=Tensor[(1, 256, 14, 14), int16] */;
  %1289 = clip(%1288, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 256, 14, 14), int16] */;
  %1290 = cast(%1289, dtype="int8") /* ty=Tensor[(1, 256, 14, 14), int8] */;
  %1291 = annotation.stop_fusion(%1290) /* ty=Tensor[(1, 256, 14, 14), int8] */;
  %1292 = cast(%1291, dtype="float32") /* ty=Tensor[(1, 256, 14, 14), float32] */;
  %1293 = multiply(%1292, 0.125f /* ty=float32 */) /* ty=Tensor[(1, 256, 14, 14), float32] */;
  %1294 = nn.bias_add(%1293, meta[relay.Constant][183] /* ty=Tensor[(256), float32] */) /* ty=Tensor[(1, 256, 14, 14), float32] span=aten::_convolution_91:0:0 */;
  %1295 = nn.relu(%1294) /* ty=Tensor[(1, 256, 14, 14), float32] span=aten::relu__88:0:0 */;
  %1296 = multiply(%1295, 8f /* ty=float32 */) /* ty=Tensor[(1, 256, 14, 14), float32] */;
  %1297 = round(%1296) /* ty=Tensor[(1, 256, 14, 14), float32] */;
  %1298 = clip(%1297, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 256, 14, 14), float32] */;
  %1299 = cast(%1298, dtype="int8") /* ty=Tensor[(1, 256, 14, 14), int8] */;
  %1300 = nn.conv2d(%1299, meta[relay.Constant][184] /* ty=Tensor[(256, 256, 3, 3), int8] */, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3], out_dtype="int16") /* ty=Tensor[(1, 256, 14, 14), int16] */;
  %1301 = add(%1300, 64i16 /* ty=int16 */) /* ty=Tensor[(1, 256, 14, 14), int16] */;
  %1302 = right_shift(%1301, 7i16 /* ty=int16 */) /* ty=Tensor[(1, 256, 14, 14), int16] */;
  %1303 = clip(%1302, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 256, 14, 14), int16] */;
  %1304 = cast(%1303, dtype="int8") /* ty=Tensor[(1, 256, 14, 14), int8] */;
  %1305 = annotation.stop_fusion(%1304) /* ty=Tensor[(1, 256, 14, 14), int8] */;
  %1306 = cast(%1305, dtype="float32") /* ty=Tensor[(1, 256, 14, 14), float32] */;
  %1307 = multiply(%1306, 0.125f /* ty=float32 */) /* ty=Tensor[(1, 256, 14, 14), float32] */;
  %1308 = nn.bias_add(%1307, meta[relay.Constant][185] /* ty=Tensor[(256), float32] */) /* ty=Tensor[(1, 256, 14, 14), float32] span=aten::_convolution_92:0:0 */;
  %1309 = nn.relu(%1308) /* ty=Tensor[(1, 256, 14, 14), float32] span=aten::relu__89:0:0 */;
  %1310 = multiply(%1309, 8f /* ty=float32 */) /* ty=Tensor[(1, 256, 14, 14), float32] */;
  %1311 = round(%1310) /* ty=Tensor[(1, 256, 14, 14), float32] */;
  %1312 = clip(%1311, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 256, 14, 14), float32] */;
  %1313 = cast(%1312, dtype="int8") /* ty=Tensor[(1, 256, 14, 14), int8] */;
  %1314 = nn.conv2d(%1313, meta[relay.Constant][186] /* ty=Tensor[(1024, 256, 1, 1), int8] */, padding=[0, 0, 0, 0], channels=1024, kernel_size=[1, 1], out_dtype="int16") /* ty=Tensor[(1, 1024, 14, 14), int16] */;
  %1315 = add(%1314, 16i16 /* ty=int16 */) /* ty=Tensor[(1, 1024, 14, 14), int16] */;
  %1316 = right_shift(%1315, 5i16 /* ty=int16 */) /* ty=Tensor[(1, 1024, 14, 14), int16] */;
  %1317 = clip(%1316, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 1024, 14, 14), int16] */;
  %1318 = cast(%1317, dtype="int8") /* ty=Tensor[(1, 1024, 14, 14), int8] */;
  %1319 = annotation.stop_fusion(%1318) /* ty=Tensor[(1, 1024, 14, 14), int8] */;
  %1320 = cast(%1319, dtype="float32") /* ty=Tensor[(1, 1024, 14, 14), float32] */;
  %1321 = multiply(%1320, 0.125f /* ty=float32 */) /* ty=Tensor[(1, 1024, 14, 14), float32] */;
  %1322 = nn.bias_add(%1321, meta[relay.Constant][187] /* ty=Tensor[(1024), float32] */) /* ty=Tensor[(1, 1024, 14, 14), float32] span=aten::_convolution_93:0:0 */;
  %1323 = add(%1322, %1281) /* ty=Tensor[(1, 1024, 14, 14), float32] span=aten::add__29:0:0 */;
  %1324 = nn.relu(%1323) /* ty=Tensor[(1, 1024, 14, 14), float32] span=aten::relu__90:0:0 */;
  %1325 = multiply(%1324, 8f /* ty=float32 */) /* ty=Tensor[(1, 1024, 14, 14), float32] */;
  %1326 = round(%1325) /* ty=Tensor[(1, 1024, 14, 14), float32] */;
  %1327 = clip(%1326, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 1024, 14, 14), float32] */;
  %1328 = cast(%1327, dtype="int8") /* ty=Tensor[(1, 1024, 14, 14), int8] */;
  %1329 = nn.conv2d(%1328, meta[relay.Constant][188] /* ty=Tensor[(512, 1024, 1, 1), int8] */, padding=[0, 0, 0, 0], channels=512, kernel_size=[1, 1], out_dtype="int16") /* ty=Tensor[(1, 512, 14, 14), int16] */;
  %1330 = add(%1329, 128i16 /* ty=int16 */) /* ty=Tensor[(1, 512, 14, 14), int16] */;
  %1331 = right_shift(%1330, 8i16 /* ty=int16 */) /* ty=Tensor[(1, 512, 14, 14), int16] */;
  %1332 = clip(%1331, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 512, 14, 14), int16] */;
  %1333 = cast(%1332, dtype="int8") /* ty=Tensor[(1, 512, 14, 14), int8] */;
  %1334 = annotation.stop_fusion(%1333) /* ty=Tensor[(1, 512, 14, 14), int8] */;
  %1335 = cast(%1334, dtype="float32") /* ty=Tensor[(1, 512, 14, 14), float32] */;
  %1336 = multiply(%1335, 0.125f /* ty=float32 */) /* ty=Tensor[(1, 512, 14, 14), float32] */;
  %1337 = nn.bias_add(%1336, meta[relay.Constant][189] /* ty=Tensor[(512), float32] */) /* ty=Tensor[(1, 512, 14, 14), float32] span=aten::_convolution_94:0:0 */;
  %1338 = nn.relu(%1337) /* ty=Tensor[(1, 512, 14, 14), float32] span=aten::relu__91:0:0 */;
  %1339 = multiply(%1338, 8f /* ty=float32 */) /* ty=Tensor[(1, 512, 14, 14), float32] */;
  %1340 = round(%1339) /* ty=Tensor[(1, 512, 14, 14), float32] */;
  %1341 = clip(%1340, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 512, 14, 14), float32] */;
  %1342 = cast(%1341, dtype="int8") /* ty=Tensor[(1, 512, 14, 14), int8] */;
  %1343 = nn.conv2d(%1342, meta[relay.Constant][190] /* ty=Tensor[(512, 512, 3, 3), int8] */, strides=[2, 2], padding=[1, 1, 1, 1], channels=512, kernel_size=[3, 3], out_dtype="int16") /* ty=Tensor[(1, 512, 7, 7), int16] */;
  %1344 = add(%1343, 128i16 /* ty=int16 */) /* ty=Tensor[(1, 512, 7, 7), int16] */;
  %1345 = right_shift(%1344, 8i16 /* ty=int16 */) /* ty=Tensor[(1, 512, 7, 7), int16] */;
  %1346 = clip(%1345, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 512, 7, 7), int16] */;
  %1347 = cast(%1346, dtype="int8") /* ty=Tensor[(1, 512, 7, 7), int8] */;
  %1348 = annotation.stop_fusion(%1347) /* ty=Tensor[(1, 512, 7, 7), int8] */;
  %1349 = cast(%1348, dtype="float32") /* ty=Tensor[(1, 512, 7, 7), float32] */;
  %1350 = multiply(%1349, 0.125f /* ty=float32 */) /* ty=Tensor[(1, 512, 7, 7), float32] */;
  %1351 = nn.bias_add(%1350, meta[relay.Constant][191] /* ty=Tensor[(512), float32] */) /* ty=Tensor[(1, 512, 7, 7), float32] span=aten::_convolution_95:0:0 */;
  %1352 = nn.relu(%1351) /* ty=Tensor[(1, 512, 7, 7), float32] span=aten::relu__92:0:0 */;
  %1353 = multiply(%1352, 8f /* ty=float32 */) /* ty=Tensor[(1, 512, 7, 7), float32] */;
  %1354 = round(%1353) /* ty=Tensor[(1, 512, 7, 7), float32] */;
  %1355 = clip(%1354, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 512, 7, 7), float32] */;
  %1356 = cast(%1355, dtype="int8") /* ty=Tensor[(1, 512, 7, 7), int8] */;
  %1357 = nn.conv2d(%1356, meta[relay.Constant][192] /* ty=Tensor[(2048, 512, 1, 1), int8] */, padding=[0, 0, 0, 0], channels=2048, kernel_size=[1, 1], out_dtype="int16") /* ty=Tensor[(1, 2048, 7, 7), int16] */;
  %1358 = add(%1357, 8i16 /* ty=int16 */) /* ty=Tensor[(1, 2048, 7, 7), int16] */;
  %1359 = right_shift(%1358, 4i16 /* ty=int16 */) /* ty=Tensor[(1, 2048, 7, 7), int16] */;
  %1360 = clip(%1359, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 2048, 7, 7), int16] */;
  %1361 = cast(%1360, dtype="int8") /* ty=Tensor[(1, 2048, 7, 7), int8] */;
  %1362 = annotation.stop_fusion(%1361) /* ty=Tensor[(1, 2048, 7, 7), int8] */;
  %1363 = cast(%1362, dtype="float32") /* ty=Tensor[(1, 2048, 7, 7), float32] */;
  %1364 = multiply(%1363, 0.125f /* ty=float32 */) /* ty=Tensor[(1, 2048, 7, 7), float32] */;
  %1365 = cast(%1327, dtype="int8") /* ty=Tensor[(1, 1024, 14, 14), int8] */;
  %1366 = nn.conv2d(%1365, meta[relay.Constant][194] /* ty=Tensor[(2048, 1024, 1, 1), int8] */, strides=[2, 2], padding=[0, 0, 0, 0], channels=2048, kernel_size=[1, 1], out_dtype="int16") /* ty=Tensor[(1, 2048, 7, 7), int16] */;
  %1367 = add(%1366, 8i16 /* ty=int16 */) /* ty=Tensor[(1, 2048, 7, 7), int16] */;
  %1368 = right_shift(%1367, 4i16 /* ty=int16 */) /* ty=Tensor[(1, 2048, 7, 7), int16] */;
  %1369 = clip(%1368, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 2048, 7, 7), int16] */;
  %1370 = cast(%1369, dtype="int8") /* ty=Tensor[(1, 2048, 7, 7), int8] */;
  %1371 = annotation.stop_fusion(%1370) /* ty=Tensor[(1, 2048, 7, 7), int8] */;
  %1372 = cast(%1371, dtype="float32") /* ty=Tensor[(1, 2048, 7, 7), float32] */;
  %1373 = multiply(%1372, 0.125f /* ty=float32 */) /* ty=Tensor[(1, 2048, 7, 7), float32] */;
  %1374 = nn.bias_add(%1364, meta[relay.Constant][193] /* ty=Tensor[(2048), float32] */) /* ty=Tensor[(1, 2048, 7, 7), float32] span=aten::_convolution_96:0:0 */;
  %1375 = nn.bias_add(%1373, meta[relay.Constant][195] /* ty=Tensor[(2048), float32] */) /* ty=Tensor[(1, 2048, 7, 7), float32] span=aten::_convolution_97:0:0 */;
  %1376 = add(%1374, %1375) /* ty=Tensor[(1, 2048, 7, 7), float32] span=aten::add__30:0:0 */;
  %1377 = nn.relu(%1376) /* ty=Tensor[(1, 2048, 7, 7), float32] span=aten::relu__93:0:0 */;
  %1378 = multiply(%1377, 8f /* ty=float32 */) /* ty=Tensor[(1, 2048, 7, 7), float32] */;
  %1379 = round(%1378) /* ty=Tensor[(1, 2048, 7, 7), float32] */;
  %1380 = clip(%1379, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 2048, 7, 7), float32] */;
  %1381 = cast(%1380, dtype="int8") /* ty=Tensor[(1, 2048, 7, 7), int8] */;
  %1382 = nn.conv2d(%1381, meta[relay.Constant][196] /* ty=Tensor[(512, 2048, 1, 1), int8] */, padding=[0, 0, 0, 0], channels=512, kernel_size=[1, 1], out_dtype="int16") /* ty=Tensor[(1, 512, 7, 7), int16] */;
  %1383 = add(%1382, 512i16 /* ty=int16 */) /* ty=Tensor[(1, 512, 7, 7), int16] */;
  %1384 = right_shift(%1383, 10i16 /* ty=int16 */) /* ty=Tensor[(1, 512, 7, 7), int16] */;
  %1385 = clip(%1384, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 512, 7, 7), int16] */;
  %1386 = cast(%1385, dtype="int8") /* ty=Tensor[(1, 512, 7, 7), int8] */;
  %1387 = annotation.stop_fusion(%1386) /* ty=Tensor[(1, 512, 7, 7), int8] */;
  %1388 = cast(%1387, dtype="float32") /* ty=Tensor[(1, 512, 7, 7), float32] */;
  %1389 = multiply(%1388, 0.125f /* ty=float32 */) /* ty=Tensor[(1, 512, 7, 7), float32] */;
  %1390 = nn.bias_add(%1389, meta[relay.Constant][197] /* ty=Tensor[(512), float32] */) /* ty=Tensor[(1, 512, 7, 7), float32] span=aten::_convolution_98:0:0 */;
  %1391 = nn.relu(%1390) /* ty=Tensor[(1, 512, 7, 7), float32] span=aten::relu__94:0:0 */;
  %1392 = multiply(%1391, 8f /* ty=float32 */) /* ty=Tensor[(1, 512, 7, 7), float32] */;
  %1393 = round(%1392) /* ty=Tensor[(1, 512, 7, 7), float32] */;
  %1394 = clip(%1393, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 512, 7, 7), float32] */;
  %1395 = cast(%1394, dtype="int8") /* ty=Tensor[(1, 512, 7, 7), int8] */;
  %1396 = nn.conv2d(%1395, meta[relay.Constant][198] /* ty=Tensor[(512, 512, 3, 3), int8] */, padding=[1, 1, 1, 1], channels=512, kernel_size=[3, 3], out_dtype="int16") /* ty=Tensor[(1, 512, 7, 7), int16] */;
  %1397 = add(%1396, 128i16 /* ty=int16 */) /* ty=Tensor[(1, 512, 7, 7), int16] */;
  %1398 = right_shift(%1397, 8i16 /* ty=int16 */) /* ty=Tensor[(1, 512, 7, 7), int16] */;
  %1399 = clip(%1398, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 512, 7, 7), int16] */;
  %1400 = cast(%1399, dtype="int8") /* ty=Tensor[(1, 512, 7, 7), int8] */;
  %1401 = annotation.stop_fusion(%1400) /* ty=Tensor[(1, 512, 7, 7), int8] */;
  %1402 = cast(%1401, dtype="float32") /* ty=Tensor[(1, 512, 7, 7), float32] */;
  %1403 = multiply(%1402, 0.125f /* ty=float32 */) /* ty=Tensor[(1, 512, 7, 7), float32] */;
  %1404 = nn.bias_add(%1403, meta[relay.Constant][199] /* ty=Tensor[(512), float32] */) /* ty=Tensor[(1, 512, 7, 7), float32] span=aten::_convolution_99:0:0 */;
  %1405 = nn.relu(%1404) /* ty=Tensor[(1, 512, 7, 7), float32] span=aten::relu__95:0:0 */;
  %1406 = multiply(%1405, 8f /* ty=float32 */) /* ty=Tensor[(1, 512, 7, 7), float32] */;
  %1407 = round(%1406) /* ty=Tensor[(1, 512, 7, 7), float32] */;
  %1408 = clip(%1407, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 512, 7, 7), float32] */;
  %1409 = cast(%1408, dtype="int8") /* ty=Tensor[(1, 512, 7, 7), int8] */;
  %1410 = nn.conv2d(%1409, meta[relay.Constant][200] /* ty=Tensor[(2048, 512, 1, 1), int8] */, padding=[0, 0, 0, 0], channels=2048, kernel_size=[1, 1], out_dtype="int16") /* ty=Tensor[(1, 2048, 7, 7), int16] */;
  %1411 = add(%1410, 8i16 /* ty=int16 */) /* ty=Tensor[(1, 2048, 7, 7), int16] */;
  %1412 = right_shift(%1411, 4i16 /* ty=int16 */) /* ty=Tensor[(1, 2048, 7, 7), int16] */;
  %1413 = clip(%1412, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 2048, 7, 7), int16] */;
  %1414 = cast(%1413, dtype="int8") /* ty=Tensor[(1, 2048, 7, 7), int8] */;
  %1415 = annotation.stop_fusion(%1414) /* ty=Tensor[(1, 2048, 7, 7), int8] */;
  %1416 = cast(%1415, dtype="float32") /* ty=Tensor[(1, 2048, 7, 7), float32] */;
  %1417 = multiply(%1416, 0.125f /* ty=float32 */) /* ty=Tensor[(1, 2048, 7, 7), float32] */;
  %1418 = nn.bias_add(%1417, meta[relay.Constant][201] /* ty=Tensor[(2048), float32] */) /* ty=Tensor[(1, 2048, 7, 7), float32] span=aten::_convolution_100:0:0 */;
  %1419 = add(%1418, %1377) /* ty=Tensor[(1, 2048, 7, 7), float32] span=aten::add__31:0:0 */;
  %1420 = nn.relu(%1419) /* ty=Tensor[(1, 2048, 7, 7), float32] span=aten::relu__96:0:0 */;
  %1421 = multiply(%1420, 8f /* ty=float32 */) /* ty=Tensor[(1, 2048, 7, 7), float32] */;
  %1422 = round(%1421) /* ty=Tensor[(1, 2048, 7, 7), float32] */;
  %1423 = clip(%1422, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 2048, 7, 7), float32] */;
  %1424 = cast(%1423, dtype="int8") /* ty=Tensor[(1, 2048, 7, 7), int8] */;
  %1425 = nn.conv2d(%1424, meta[relay.Constant][202] /* ty=Tensor[(512, 2048, 1, 1), int8] */, padding=[0, 0, 0, 0], channels=512, kernel_size=[1, 1], out_dtype="int16") /* ty=Tensor[(1, 512, 7, 7), int16] */;
  %1426 = add(%1425, 256i16 /* ty=int16 */) /* ty=Tensor[(1, 512, 7, 7), int16] */;
  %1427 = right_shift(%1426, 9i16 /* ty=int16 */) /* ty=Tensor[(1, 512, 7, 7), int16] */;
  %1428 = clip(%1427, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 512, 7, 7), int16] */;
  %1429 = cast(%1428, dtype="int8") /* ty=Tensor[(1, 512, 7, 7), int8] */;
  %1430 = annotation.stop_fusion(%1429) /* ty=Tensor[(1, 512, 7, 7), int8] */;
  %1431 = cast(%1430, dtype="float32") /* ty=Tensor[(1, 512, 7, 7), float32] */;
  %1432 = multiply(%1431, 0.125f /* ty=float32 */) /* ty=Tensor[(1, 512, 7, 7), float32] */;
  %1433 = nn.bias_add(%1432, meta[relay.Constant][203] /* ty=Tensor[(512), float32] */) /* ty=Tensor[(1, 512, 7, 7), float32] span=aten::_convolution_101:0:0 */;
  %1434 = nn.relu(%1433) /* ty=Tensor[(1, 512, 7, 7), float32] span=aten::relu__97:0:0 */;
  %1435 = multiply(%1434, 8f /* ty=float32 */) /* ty=Tensor[(1, 512, 7, 7), float32] */;
  %1436 = round(%1435) /* ty=Tensor[(1, 512, 7, 7), float32] */;
  %1437 = clip(%1436, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 512, 7, 7), float32] */;
  %1438 = cast(%1437, dtype="int8") /* ty=Tensor[(1, 512, 7, 7), int8] */;
  %1439 = nn.conv2d(%1438, meta[relay.Constant][204] /* ty=Tensor[(512, 512, 3, 3), int8] */, padding=[1, 1, 1, 1], channels=512, kernel_size=[3, 3], out_dtype="int16") /* ty=Tensor[(1, 512, 7, 7), int16] */;
  %1440 = add(%1439, 256i16 /* ty=int16 */) /* ty=Tensor[(1, 512, 7, 7), int16] */;
  %1441 = right_shift(%1440, 9i16 /* ty=int16 */) /* ty=Tensor[(1, 512, 7, 7), int16] */;
  %1442 = clip(%1441, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 512, 7, 7), int16] */;
  %1443 = cast(%1442, dtype="int8") /* ty=Tensor[(1, 512, 7, 7), int8] */;
  %1444 = annotation.stop_fusion(%1443) /* ty=Tensor[(1, 512, 7, 7), int8] */;
  %1445 = cast(%1444, dtype="float32") /* ty=Tensor[(1, 512, 7, 7), float32] */;
  %1446 = multiply(%1445, 0.125f /* ty=float32 */) /* ty=Tensor[(1, 512, 7, 7), float32] */;
  %1447 = nn.bias_add(%1446, meta[relay.Constant][205] /* ty=Tensor[(512), float32] */) /* ty=Tensor[(1, 512, 7, 7), float32] span=aten::_convolution_102:0:0 */;
  %1448 = nn.relu(%1447) /* ty=Tensor[(1, 512, 7, 7), float32] span=aten::relu__98:0:0 */;
  %1449 = multiply(%1448, 8f /* ty=float32 */) /* ty=Tensor[(1, 512, 7, 7), float32] */;
  %1450 = round(%1449) /* ty=Tensor[(1, 512, 7, 7), float32] */;
  %1451 = clip(%1450, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 512, 7, 7), float32] */;
  %1452 = cast(%1451, dtype="int8") /* ty=Tensor[(1, 512, 7, 7), int8] */;
  %1453 = nn.conv2d(%1452, meta[relay.Constant][206] /* ty=Tensor[(2048, 512, 1, 1), int8] */, padding=[0, 0, 0, 0], channels=2048, kernel_size=[1, 1], out_dtype="int16") /* ty=Tensor[(1, 2048, 7, 7), int16] */;
  %1454 = add(%1453, 8i16 /* ty=int16 */) /* ty=Tensor[(1, 2048, 7, 7), int16] */;
  %1455 = right_shift(%1454, 4i16 /* ty=int16 */) /* ty=Tensor[(1, 2048, 7, 7), int16] */;
  %1456 = clip(%1455, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 2048, 7, 7), int16] */;
  %1457 = cast(%1456, dtype="int8") /* ty=Tensor[(1, 2048, 7, 7), int8] */;
  %1458 = annotation.stop_fusion(%1457) /* ty=Tensor[(1, 2048, 7, 7), int8] */;
  %1459 = cast(%1458, dtype="float32") /* ty=Tensor[(1, 2048, 7, 7), float32] */;
  %1460 = multiply(%1459, 0.125f /* ty=float32 */) /* ty=Tensor[(1, 2048, 7, 7), float32] */;
  %1461 = nn.bias_add(%1460, meta[relay.Constant][207] /* ty=Tensor[(2048), float32] */) /* ty=Tensor[(1, 2048, 7, 7), float32] span=aten::_convolution_103:0:0 */;
  %1462 = add(%1461, %1420) /* ty=Tensor[(1, 2048, 7, 7), float32] span=aten::add__32:0:0 */;
  %1463 = nn.relu(%1462) /* ty=Tensor[(1, 2048, 7, 7), float32] span=aten::relu__99:0:0 */;
  %1464 = nn.adaptive_avg_pool2d(%1463, output_size=[1, 1]) /* ty=Tensor[(1, 2048, 1, 1), float32] span=aten::adaptive_avg_pool2d_0:0:0 */;
  %1465 = reshape(%1464, newshape=[0, -1, 1, 1]) /* ty=Tensor[(1, 2048, 1, 1), float32] span=aten::flatten_0:0:0 */;
  %1466 = squeeze(%1465, axis=[2, 3]) /* ty=Tensor[(1, 2048), float32] span=aten::flatten_0:0:0 */;
  %1467 = multiply(%1466, 8f /* ty=float32 */) /* ty=Tensor[(1, 2048), float32] */;
  %1468 = round(%1467) /* ty=Tensor[(1, 2048), float32] */;
  %1469 = clip(%1468, a_min=-127f, a_max=127f) /* ty=Tensor[(1, 2048), float32] */;
  %1470 = cast(%1469, dtype="int8") /* ty=Tensor[(1, 2048), int8] */;
  %1471 = nn.dense(%1470, meta[relay.Constant][208] /* ty=Tensor[(1000, 2048), int8] */, units=None, out_dtype="int16") /* ty=Tensor[(1, 1000), int16] */;
  %1472 = cast(%1471, dtype="float32") /* ty=Tensor[(1, 1000), float32] */;
  %1473 = multiply(%1472, 0.000976562f /* ty=float32 */) /* ty=Tensor[(1, 1000), float32] */;
  nn.bias_add(%1473, meta[relay.Constant][209] /* ty=Tensor[(1000), float32] */, axis=-1) /* ty=Tensor[(1, 1000), float32] span=aten::linear_0:0:0 */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */

